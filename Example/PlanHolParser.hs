module ALPHA1.PlanHolParser where

import ALPHA1.Ast
import ALPHA1.Grammar
import qualified Control.Monad.Trans.Class as Y
import qualified Control.Monad.Trans.Except as Y
import qualified Control.Monad.Trans.State.Strict as Y
import qualified Data.Map.Strict as YMap
import qualified Data.Set as YSet

-- the following codes are generated by PGS.

type ParserS = Int

type NSym = Int

type TSym = Int

data Sym
    = NS NSym
    | TS TSym
    deriving (Eq, Ord)

data Action
    = Shift ParserS
    | Reduce (NSym, [Sym])
    | Accept
    deriving (Eq)

data LR1Parser
    = LR1Parser
        { getInitialS :: ParserS
        , getActionTable :: YMap.Map (ParserS, TSym) Action
        , getReduceTable :: YMap.Map (ParserS, NSym) ParserS
        }
    deriving ()

data ParsingTree
    = PTLeaf (Token)
    | PTBranch NSym [ParsingTree]
    deriving ()

runAladdinParser :: [Token] -> Either (Maybe (Token)) (Either TermRep [DeclRep])
runAladdinParser = fmap (getEither getQuery (getSequence getDecl)) . runLALR1 theLALR1Parser where
    getQuery :: ParsingTree -> (TermRep)
    getQuery (PTBranch _ [PTLeaf (T_quest loc_1), _2@(PTBranch guard2 _), PTLeaf (T_dot loc_3)])
        | [guard2] `elem` [[3]] = (getTermRep0 _2)
    getDecl :: ParsingTree -> (DeclRep)
    getDecl (PTBranch _ [PTLeaf (T_kind loc_1), PTLeaf (T_smallid loc_2 contents_2), _3@(PTBranch guard3 _), PTLeaf (T_dot loc_4)])
        | [guard3] `elem` [[16]] = RKindDecl ((loc_1) <> (loc_4)) (TC_Named (contents_2)) (getKindRep0 _3)
    getDecl (PTBranch _ [PTLeaf (T_type loc_1), PTLeaf (T_smallid loc_2 contents_2), _3@(PTBranch guard3 _), PTLeaf (T_dot loc_4)])
        | [guard3] `elem` [[18]] = RTypeDecl ((loc_1) <> (loc_4)) (DC_Named (contents_2)) (getTypeRep0 _3)
    getDecl (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_dot loc_2)])
        | [guard1] `elem` [[3]] = RFactDecl (getSLoc (getTermRep0 _1) <> (loc_2)) (getTermRep0 _1)
    getKindRep0 :: ParsingTree -> (KindRep)
    getKindRep0 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_arrow loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[17, 16]] = RKArr (getSLoc (getKindRep1 _1) <> getSLoc (getKindRep0 _3)) (getKindRep1 _1) (getKindRep0 _3)
    getKindRep0 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[17]] = (getKindRep1 _1)
    getKindRep1 :: ParsingTree -> (KindRep)
    getKindRep1 (PTBranch _ [PTLeaf (T_type loc_1)])
        | otherwise = RStar (loc_1)
    getKindRep1 (PTBranch _ [PTLeaf (T_lparen loc_1), _2@(PTBranch guard2 _), PTLeaf (T_rparen loc_3)])
        | [guard2] `elem` [[16]] = RKPrn ((loc_1) <> (loc_3)) (getKindRep0 _2)
    getTypeRep0 :: ParsingTree -> (TypeRep)
    getTypeRep0 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_arrow loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[19, 18]] = RTyApp (getSLoc (getTypeRep1 _1) <> getSLoc (getTypeRep0 _3)) (RTyApp (getSLoc (getTypeRep1 _1) <> (loc_2)) (RTyCon (loc_2) TC_Arrow) (getTypeRep1 _1)) (getTypeRep0 _3)
    getTypeRep0 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[19]] = (getTypeRep1 _1)
    getTypeRep1 :: ParsingTree -> (TypeRep)
    getTypeRep1 (PTBranch _ [_1@(PTBranch guard1 _), _2@(PTBranch guard2 _)])
        | [guard1, guard2] `elem` [[19, 20]] = RTyApp (getSLoc (getTypeRep1 _1) <> getSLoc (getTypeRep2 _2)) (getTypeRep1 _1) (getTypeRep2 _2)
    getTypeRep1 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[20]] = (getTypeRep2 _1)
    getTypeRep2 :: ParsingTree -> (TypeRep)
    getTypeRep2 (PTBranch _ [PTLeaf (T_largeid loc_1 contents_1)])
        | otherwise = RTyVar (loc_1) (contents_1)
    getTypeRep2 (PTBranch _ [PTLeaf (T_smallid loc_1 contents_1)])
        | otherwise = RTyCon (loc_1) (TC_Named (contents_1))
    getTypeRep2 (PTBranch _ [PTLeaf (T_lparen loc_1), _2@(PTBranch guard2 _), PTLeaf (T_rparen loc_3)])
        | [guard2] `elem` [[18]] = RTyPrn ((loc_1) <> (loc_3)) (getTypeRep0 _2)
    getTermRep0 :: ParsingTree -> (TermRep)
    getTermRep0 (PTBranch _ [PTLeaf (T_largeid loc_1 contents_1), PTLeaf (T_bslash loc_2), _3@(PTBranch guard3 _)])
        | [guard3] `elem` [[3]] = RAbs ((loc_1) <> getSLoc (getTermRep0 _3)) (contents_1) (getTermRep0 _3)
    getTermRep0 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_if loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[4, 3]] = RApp (getSLoc (getTermRep1 _1) <> getSLoc (getTermRep0 _3)) (RApp (getSLoc (getTermRep1 _1) <> (loc_2)) (RCon (loc_2) (DC_LO LO_if)) (getTermRep1 _1)) (getTermRep0 _3)
    getTermRep0 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[4]] = (getTermRep1 _1)
    getTermRep1 :: ParsingTree -> (TermRep)
    getTermRep1 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_semicolon loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[4, 5]] = RApp (getSLoc (getTermRep1 _1) <> getSLoc (getTermRep2 _3)) (RApp (getSLoc (getTermRep1 _1) <> (loc_2)) (RCon (loc_2) (DC_LO LO_or)) (getTermRep1 _1)) (getTermRep2 _3)
    getTermRep1 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[5]] = (getTermRep2 _1)
    getTermRep2 :: ParsingTree -> (TermRep)
    getTermRep2 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_fatarrow loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[6, 5]] = RApp (getSLoc (getTermRep3 _1) <> getSLoc (getTermRep2 _3)) (RApp (getSLoc (getTermRep3 _1) <> (loc_2)) (RCon (loc_2) (DC_LO LO_imply)) (getTermRep3 _1)) (getTermRep2 _3)
    getTermRep2 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[6]] = (getTermRep3 _1)
    getTermRep3 :: ParsingTree -> (TermRep)
    getTermRep3 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_comma loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[6, 7]] = RApp (getSLoc (getTermRep3 _1) <> getSLoc (getTermRep4 _3)) (RApp (getSLoc (getTermRep3 _1) <> (loc_2)) (RCon (loc_2) (DC_LO LO_and)) (getTermRep3 _1)) (getTermRep4 _3)
    getTermRep3 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[7]] = (getTermRep4 _1)
    getTermRep4 :: ParsingTree -> (TermRep)
    getTermRep4 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_cons loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[8, 7]] = RApp (getSLoc (getTermRep5 _1) <> getSLoc (getTermRep4 _3)) (RApp (getSLoc (getTermRep5 _1) <> (loc_2)) (RCon (loc_2) DC_Cons) (getTermRep5 _1)) (getTermRep4 _3)
    getTermRep4 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[8]] = (getTermRep5 _1)
    getTermRep5 :: ParsingTree -> (TermRep)
    getTermRep5 (PTBranch _ [PTLeaf (T_pi loc_1), _2@(PTBranch guard2 _)])
        | [guard2] `elem` [[8]] = RApp ((loc_1) <> getSLoc (getTermRep5 _2)) (RCon (loc_1) (DC_LO LO_pi)) (getTermRep5 _2)
    getTermRep5 (PTBranch _ [PTLeaf (T_sigma loc_1), _2@(PTBranch guard2 _)])
        | [guard2] `elem` [[8]] = RApp ((loc_1) <> getSLoc (getTermRep5 _2)) (RCon (loc_1) (DC_LO LO_sigma)) (getTermRep5 _2)
    getTermRep5 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_eq loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[9, 9]] = RApp (getSLoc (getTermRep6 _1) <> getSLoc (getTermRep6 _3)) (RApp (getSLoc (getTermRep6 _1) <> (loc_2)) (RCon (loc_2) DC_eq) (getTermRep6 _1)) (getTermRep6 _3)
    getTermRep5 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_le loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[9, 9]] = RApp (getSLoc (getTermRep6 _1) <> getSLoc (getTermRep6 _3)) (RApp (getSLoc (getTermRep6 _1) <> (loc_2)) (RCon (loc_2) DC_le) (getTermRep6 _1)) (getTermRep6 _3)
    getTermRep5 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_lt loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[9, 9]] = RApp (getSLoc (getTermRep6 _1) <> getSLoc (getTermRep6 _3)) (RApp (getSLoc (getTermRep6 _1) <> (loc_2)) (RCon (loc_2) DC_lt) (getTermRep6 _1)) (getTermRep6 _3)
    getTermRep5 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_ge loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[9, 9]] = RApp (getSLoc (getTermRep6 _1) <> getSLoc (getTermRep6 _3)) (RApp (getSLoc (getTermRep6 _1) <> (loc_2)) (RCon (loc_2) DC_ge) (getTermRep6 _1)) (getTermRep6 _3)
    getTermRep5 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_gt loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[9, 9]] = RApp (getSLoc (getTermRep6 _1) <> getSLoc (getTermRep6 _3)) (RApp (getSLoc (getTermRep6 _1) <> (loc_2)) (RCon (loc_2) DC_gt) (getTermRep6 _1)) (getTermRep6 _3)
    getTermRep5 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[9]] = (getTermRep6 _1)
    getTermRep6 :: ParsingTree -> (TermRep)
    getTermRep6 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_plus loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[9, 10]] = RApp (getSLoc (getTermRep6 _1) <> getSLoc (getTermRep7 _3)) (RApp (getSLoc (getTermRep6 _1) <> (loc_2)) (RCon (loc_2) DC_plus) (getTermRep6 _1)) (getTermRep7 _3)
    getTermRep6 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_minus loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[9, 10]] = RApp (getSLoc (getTermRep6 _1) <> getSLoc (getTermRep7 _3)) (RApp (getSLoc (getTermRep6 _1) <> (loc_2)) (RCon (loc_2) DC_minus) (getTermRep6 _1)) (getTermRep7 _3)
    getTermRep6 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[10]] = (getTermRep7 _1)
    getTermRep7 :: ParsingTree -> (TermRep)
    getTermRep7 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_star loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[10, 11]] = RApp (getSLoc (getTermRep7 _1) <> getSLoc (getTermRep8 _3)) (RApp (getSLoc (getTermRep7 _1) <> (loc_2)) (RCon (loc_2) DC_mul) (getTermRep7 _1)) (getTermRep8 _3)
    getTermRep7 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_slash loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[10, 11]] = RApp (getSLoc (getTermRep7 _1) <> getSLoc (getTermRep8 _3)) (RApp (getSLoc (getTermRep7 _1) <> (loc_2)) (RCon (loc_2) DC_div) (getTermRep7 _1)) (getTermRep8 _3)
    getTermRep7 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[11]] = (getTermRep8 _1)
    getTermRep8 :: ParsingTree -> (TermRep)
    getTermRep8 (PTBranch _ [_1@(PTBranch guard1 _), _2@(PTBranch guard2 _)])
        | [guard1, guard2] `elem` [[11, 12]] = RApp (getSLoc (getTermRep8 _1) <> getSLoc (getTermRep9 _2)) (getTermRep8 _1) (getTermRep9 _2)
    getTermRep8 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[12]] = (getTermRep9 _1)
    getTermRep8 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_largeid loc_2 contents_2), PTLeaf (T_bslash loc_3), _4@(PTBranch guard4 _)])
        | [guard1, guard4] `elem` [[12, 3]] = RApp (getSLoc (getTermRep9 _1) <> getSLoc (getTermRep0 _4)) (getTermRep9 _1) (RAbs ((loc_2) <> getSLoc (getTermRep0 _4)) (contents_2) (getTermRep0 _4))
    getTermRep8 (PTBranch _ [PTLeaf (T_succ loc_1)])
        | otherwise = RCon (loc_1) DC_Succ
    getTermRep9 :: ParsingTree -> (TermRep)
    getTermRep9 (PTBranch _ [PTLeaf (T_lparen loc_1), _2@(PTBranch guard2 _), PTLeaf (T_rparen loc_3)])
        | [guard2] `elem` [[3]] = RPrn ((loc_1) <> (loc_3)) (getTermRep0 _2)
    getTermRep9 (PTBranch _ [PTLeaf (T_cut loc_1)])
        | otherwise = RCon (loc_1) (DC_LO LO_cut)
    getTermRep9 (PTBranch _ [PTLeaf (T_true loc_1)])
        | otherwise = RCon (loc_1) (DC_LO LO_true)
    getTermRep9 (PTBranch _ [PTLeaf (T_fail loc_1)])
        | otherwise = RCon (loc_1) (DC_LO LO_fail)
    getTermRep9 (PTBranch _ [PTLeaf (T_debug loc_1)])
        | otherwise = RCon (loc_1) (DC_LO LO_debug)
    getTermRep9 (PTBranch _ [PTLeaf (T_smallid loc_1 contents_1)])
        | otherwise = RCon (loc_1) (DC_Named (contents_1))
    getTermRep9 (PTBranch _ [PTLeaf (T_largeid loc_1 contents_1)])
        | otherwise = RVar (loc_1) (contents_1)
    getTermRep9 (PTBranch _ [PTLeaf (T_nat_lit loc_1 contents_1)])
        | otherwise = mkNatLit (loc_1) (contents_1)
    getTermRep9 (PTBranch _ [PTLeaf (T_str_lit loc_1 contents_1)])
        | otherwise = mkStrLit (loc_1) (contents_1)
    getTermRep9 (PTBranch _ [PTLeaf (T_chr_lit loc_1 contents_1)])
        | otherwise = mkChrLit (loc_1) (contents_1)
    getTermRep9 (PTBranch _ [PTLeaf (T_lbracket loc_1), PTLeaf (T_rbracket loc_2)])
        | otherwise = RCon ((loc_1) <> (loc_2)) DC_Nil
    getTermRep9 (PTBranch _ [PTLeaf (T_lbracket loc_1), _2@(PTBranch guard2 _), PTLeaf (T_rbracket loc_3)])
        | [guard2] `elem` [[13]] = RPrn ((loc_1) <> (loc_3)) (getListBody _2)
    getSequence :: (ParsingTree -> (a)) -> ParsingTree -> ([a])
    getSequence getElem (PTBranch _ [])
        | otherwise = []
    getSequence getElem (PTBranch _ [_1@(PTBranch guard1 _), _2@(PTBranch guard2 _)])
        | [guard1, guard2] `elem` [[15, 14]] = (getElem _1) : (getSequence getElem _2)
    getEither :: (ParsingTree -> (a)) -> (ParsingTree -> (b)) -> ParsingTree -> (Either a b)
    getEither getLeft getRight (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[2]] = Left (getLeft _1)
    getEither getLeft getRight (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[14]] = Right (getRight _1)
    getListBody :: ParsingTree -> (TermRep)
    getListBody (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[8]] = RApp (getSLoc (getTermRep5 _1)) (RApp (getSLoc (getTermRep5 _1)) (RCon (getSLoc (getTermRep5 _1)) DC_Cons) (getTermRep5 _1)) (RCon (getSLoc (getTermRep5 _1)) DC_Nil)
    getListBody (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_comma loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[8, 13]] = RApp (getSLoc (getTermRep5 _1) <> getSLoc (getListBody _3)) (RApp (getSLoc (getTermRep5 _1) <> (loc_2)) (RCon (loc_2) DC_Cons) (getTermRep5 _1)) (getListBody _3)
    toTerminal :: (Token) -> TSym
    toTerminal (T_dot loc) = 1
    toTerminal (T_arrow loc) = 2
    toTerminal (T_lparen loc) = 3
    toTerminal (T_rparen loc) = 4
    toTerminal (T_lbracket loc) = 5
    toTerminal (T_rbracket loc) = 6
    toTerminal (T_quest loc) = 7
    toTerminal (T_if loc) = 8
    toTerminal (T_comma loc) = 9
    toTerminal (T_semicolon loc) = 10
    toTerminal (T_fatarrow loc) = 11
    toTerminal (T_pi loc) = 12
    toTerminal (T_sigma loc) = 13
    toTerminal (T_succ loc) = 14
    toTerminal (T_eq loc) = 15
    toTerminal (T_le loc) = 16
    toTerminal (T_lt loc) = 17
    toTerminal (T_ge loc) = 18
    toTerminal (T_gt loc) = 19
    toTerminal (T_plus loc) = 20
    toTerminal (T_minus loc) = 21
    toTerminal (T_star loc) = 22
    toTerminal (T_slash loc) = 23
    toTerminal (T_cut loc) = 24
    toTerminal (T_true loc) = 25
    toTerminal (T_fail loc) = 26
    toTerminal (T_debug loc) = 27
    toTerminal (T_bslash loc) = 28
    toTerminal (T_cons loc) = 29
    toTerminal (T_kind loc) = 30
    toTerminal (T_type loc) = 31
    toTerminal (T_smallid loc contents) = 32
    toTerminal (T_largeid loc contents) = 33
    toTerminal (T_nat_lit loc contents) = 34
    toTerminal (T_chr_lit loc contents) = 35
    toTerminal (T_str_lit loc contents) = 36
    runLALR1 :: LR1Parser -> [Token] -> Either (Maybe (Token)) ParsingTree
    runLALR1 (LR1Parser getInitS getActionT getReduceT) = go where
        loop inputs = do
            let cur = if null inputs then 0 else toTerminal (head inputs)
                exception = Y.lift (if null inputs then Left Nothing else Left (Just (head inputs)))
            (stack, trees) <- Y.get
            case YMap.lookup (head stack, cur) getActionT of
                Nothing -> exception
                Just Accept -> return ()
                Just (Shift top') -> do
                    Y.put (top' : stack, PTLeaf (head inputs) : trees)
                    loop (tail inputs)
                Just (Reduce (lhs, rhs)) -> do
                    let n = length rhs
                    case YMap.lookup (stack !! n, lhs) getReduceT of
                        Nothing -> exception
                        Just top' -> do
                            Y.put (top' : drop n stack, PTBranch lhs (reverse (take n trees)) : drop n trees)
                            loop inputs
        go tokens = do
            (_, (_, result)) <- Y.runStateT (loop tokens) ([getInitS], [])
            case result of
                [output] -> return output
    theLALR1Parser :: LR1Parser
    theLALR1Parser = LR1Parser
        { getInitialS = 0
        , getActionTable = YMap.fromAscList 
            [ ((0, 0), Reduce (14, [])), ((0, 3), Shift 22), ((0, 5), Shift 21), ((0, 7), Shift 25), ((0, 12), Shift 24), ((0, 13), Shift 26), ((0, 14), Shift 29), ((0, 24), Shift 16), ((0, 25), Shift 30), ((0, 26), Shift 18), ((0, 27), Shift 17), ((0, 30), Shift 19), ((0, 31), Shift 31), ((0, 32), Shift 27), ((0, 33), Shift 20), ((0, 34), Shift 23), ((0, 35), Shift 15), ((0, 36), Shift 28)
            , ((1, 0), Reduce (14, [])), ((1, 3), Shift 22), ((1, 5), Shift 21), ((1, 12), Shift 24), ((1, 13), Shift 26), ((1, 14), Shift 29), ((1, 24), Shift 16), ((1, 25), Shift 30), ((1, 26), Shift 18), ((1, 27), Shift 17), ((1, 30), Shift 19), ((1, 31), Shift 31), ((1, 32), Shift 27), ((1, 33), Shift 20), ((1, 34), Shift 23), ((1, 35), Shift 15), ((1, 36), Shift 28)
            , ((2, 0), Reduce (1, [NS 2]))
            , ((3, 1), Shift 33)
            , ((4, 1), Reduce (3, [NS 4])), ((4, 3), Reduce (3, [NS 4])), ((4, 4), Reduce (3, [NS 4])), ((4, 5), Reduce (3, [NS 4])), ((4, 6), Reduce (3, [NS 4])), ((4, 8), Reduce (3, [NS 4])), ((4, 9), Reduce (3, [NS 4])), ((4, 10), Reduce (3, [NS 4])), ((4, 11), Reduce (3, [NS 4])), ((4, 15), Reduce (3, [NS 4])), ((4, 16), Reduce (3, [NS 4])), ((4, 17), Reduce (3, [NS 4])), ((4, 18), Reduce (3, [NS 4])), ((4, 19), Reduce (3, [NS 4])), ((4, 20), Reduce (3, [NS 4])), ((4, 21), Reduce (3, [NS 4])), ((4, 22), Reduce (3, [NS 4])), ((4, 23), Reduce (3, [NS 4])), ((4, 24), Reduce (3, [NS 4])), ((4, 25), Reduce (3, [NS 4])), ((4, 26), Reduce (3, [NS 4])), ((4, 27), Reduce (3, [NS 4])), ((4, 29), Reduce (3, [NS 4])), ((4, 32), Reduce (3, [NS 4])), ((4, 33), Reduce (3, [NS 4])), ((4, 34), Reduce (3, [NS 4])), ((4, 35), Reduce (3, [NS 4])), ((4, 36), Reduce (3, [NS 4]))
            , ((5, 1), Reduce (4, [NS 5])), ((5, 4), Reduce (4, [NS 5])), ((5, 8), Reduce (4, [NS 5])), ((5, 10), Reduce (4, [NS 5]))
            , ((6, 1), Reduce (5, [NS 6])), ((6, 4), Reduce (5, [NS 6])), ((6, 8), Reduce (5, [NS 6])), ((6, 9), Shift 45), ((6, 10), Reduce (5, [NS 6])), ((6, 11), Shift 46)
            , ((7, 1), Reduce (6, [NS 7])), ((7, 4), Reduce (6, [NS 7])), ((7, 8), Reduce (6, [NS 7])), ((7, 9), Reduce (6, [NS 7])), ((7, 10), Reduce (6, [NS 7])), ((7, 11), Reduce (6, [NS 7]))
            , ((8, 1), Reduce (7, [NS 8])), ((8, 4), Reduce (7, [NS 8])), ((8, 8), Reduce (7, [NS 8])), ((8, 9), Reduce (7, [NS 8])), ((8, 10), Reduce (7, [NS 8])), ((8, 11), Reduce (7, [NS 8])), ((8, 29), Shift 47)
            , ((9, 1), Reduce (8, [NS 9])), ((9, 4), Reduce (8, [NS 9])), ((9, 6), Reduce (8, [NS 9])), ((9, 8), Reduce (8, [NS 9])), ((9, 9), Reduce (8, [NS 9])), ((9, 10), Reduce (8, [NS 9])), ((9, 11), Reduce (8, [NS 9])), ((9, 15), Shift 50), ((9, 16), Shift 53), ((9, 17), Shift 54), ((9, 18), Shift 51), ((9, 19), Shift 52), ((9, 20), Shift 56), ((9, 21), Shift 55), ((9, 29), Reduce (8, [NS 9]))
            , ((10, 1), Reduce (9, [NS 10])), ((10, 4), Reduce (9, [NS 10])), ((10, 6), Reduce (9, [NS 10])), ((10, 8), Reduce (9, [NS 10])), ((10, 9), Reduce (9, [NS 10])), ((10, 10), Reduce (9, [NS 10])), ((10, 11), Reduce (9, [NS 10])), ((10, 15), Reduce (9, [NS 10])), ((10, 16), Reduce (9, [NS 10])), ((10, 17), Reduce (9, [NS 10])), ((10, 18), Reduce (9, [NS 10])), ((10, 19), Reduce (9, [NS 10])), ((10, 20), Reduce (9, [NS 10])), ((10, 21), Reduce (9, [NS 10])), ((10, 22), Shift 58), ((10, 23), Shift 57), ((10, 29), Reduce (9, [NS 10]))
            , ((11, 1), Reduce (10, [NS 11])), ((11, 3), Shift 22), ((11, 4), Reduce (10, [NS 11])), ((11, 5), Shift 21), ((11, 6), Reduce (10, [NS 11])), ((11, 8), Reduce (10, [NS 11])), ((11, 9), Reduce (10, [NS 11])), ((11, 10), Reduce (10, [NS 11])), ((11, 11), Reduce (10, [NS 11])), ((11, 15), Reduce (10, [NS 11])), ((11, 16), Reduce (10, [NS 11])), ((11, 17), Reduce (10, [NS 11])), ((11, 18), Reduce (10, [NS 11])), ((11, 19), Reduce (10, [NS 11])), ((11, 20), Reduce (10, [NS 11])), ((11, 21), Reduce (10, [NS 11])), ((11, 22), Reduce (10, [NS 11])), ((11, 23), Reduce (10, [NS 11])), ((11, 24), Shift 16), ((11, 25), Shift 30), ((11, 26), Shift 18), ((11, 27), Shift 17), ((11, 29), Reduce (10, [NS 11])), ((11, 32), Shift 27), ((11, 33), Shift 38), ((11, 34), Shift 23), ((11, 35), Shift 15), ((11, 36), Shift 28)
            , ((12, 1), Reduce (11, [NS 12])), ((12, 3), Reduce (11, [NS 12])), ((12, 4), Reduce (11, [NS 12])), ((12, 5), Reduce (11, [NS 12])), ((12, 6), Reduce (11, [NS 12])), ((12, 8), Reduce (11, [NS 12])), ((12, 9), Reduce (11, [NS 12])), ((12, 10), Reduce (11, [NS 12])), ((12, 11), Reduce (11, [NS 12])), ((12, 15), Reduce (11, [NS 12])), ((12, 16), Reduce (11, [NS 12])), ((12, 17), Reduce (11, [NS 12])), ((12, 18), Reduce (11, [NS 12])), ((12, 19), Reduce (11, [NS 12])), ((12, 20), Reduce (11, [NS 12])), ((12, 21), Reduce (11, [NS 12])), ((12, 22), Reduce (11, [NS 12])), ((12, 23), Reduce (11, [NS 12])), ((12, 24), Reduce (11, [NS 12])), ((12, 25), Reduce (11, [NS 12])), ((12, 26), Reduce (11, [NS 12])), ((12, 27), Reduce (11, [NS 12])), ((12, 29), Reduce (11, [NS 12])), ((12, 32), Reduce (11, [NS 12])), ((12, 33), Reduce (11, [NS 12])), ((12, 34), Reduce (11, [NS 12])), ((12, 35), Reduce (11, [NS 12])), ((12, 36), Reduce (11, [NS 12]))
            , ((13, 0), Reduce (1, [NS 14]))
            , ((14, 0), Accept)
            , ((15, 1), Reduce (12, [TS 35])), ((15, 3), Reduce (12, [TS 35])), ((15, 4), Reduce (12, [TS 35])), ((15, 5), Reduce (12, [TS 35])), ((15, 6), Reduce (12, [TS 35])), ((15, 8), Reduce (12, [TS 35])), ((15, 9), Reduce (12, [TS 35])), ((15, 10), Reduce (12, [TS 35])), ((15, 11), Reduce (12, [TS 35])), ((15, 15), Reduce (12, [TS 35])), ((15, 16), Reduce (12, [TS 35])), ((15, 17), Reduce (12, [TS 35])), ((15, 18), Reduce (12, [TS 35])), ((15, 19), Reduce (12, [TS 35])), ((15, 20), Reduce (12, [TS 35])), ((15, 21), Reduce (12, [TS 35])), ((15, 22), Reduce (12, [TS 35])), ((15, 23), Reduce (12, [TS 35])), ((15, 24), Reduce (12, [TS 35])), ((15, 25), Reduce (12, [TS 35])), ((15, 26), Reduce (12, [TS 35])), ((15, 27), Reduce (12, [TS 35])), ((15, 29), Reduce (12, [TS 35])), ((15, 32), Reduce (12, [TS 35])), ((15, 33), Reduce (12, [TS 35])), ((15, 34), Reduce (12, [TS 35])), ((15, 35), Reduce (12, [TS 35])), ((15, 36), Reduce (12, [TS 35]))
            , ((16, 1), Reduce (12, [TS 24])), ((16, 3), Reduce (12, [TS 24])), ((16, 4), Reduce (12, [TS 24])), ((16, 5), Reduce (12, [TS 24])), ((16, 6), Reduce (12, [TS 24])), ((16, 8), Reduce (12, [TS 24])), ((16, 9), Reduce (12, [TS 24])), ((16, 10), Reduce (12, [TS 24])), ((16, 11), Reduce (12, [TS 24])), ((16, 15), Reduce (12, [TS 24])), ((16, 16), Reduce (12, [TS 24])), ((16, 17), Reduce (12, [TS 24])), ((16, 18), Reduce (12, [TS 24])), ((16, 19), Reduce (12, [TS 24])), ((16, 20), Reduce (12, [TS 24])), ((16, 21), Reduce (12, [TS 24])), ((16, 22), Reduce (12, [TS 24])), ((16, 23), Reduce (12, [TS 24])), ((16, 24), Reduce (12, [TS 24])), ((16, 25), Reduce (12, [TS 24])), ((16, 26), Reduce (12, [TS 24])), ((16, 27), Reduce (12, [TS 24])), ((16, 29), Reduce (12, [TS 24])), ((16, 32), Reduce (12, [TS 24])), ((16, 33), Reduce (12, [TS 24])), ((16, 34), Reduce (12, [TS 24])), ((16, 35), Reduce (12, [TS 24])), ((16, 36), Reduce (12, [TS 24]))
            , ((17, 1), Reduce (12, [TS 27])), ((17, 3), Reduce (12, [TS 27])), ((17, 4), Reduce (12, [TS 27])), ((17, 5), Reduce (12, [TS 27])), ((17, 6), Reduce (12, [TS 27])), ((17, 8), Reduce (12, [TS 27])), ((17, 9), Reduce (12, [TS 27])), ((17, 10), Reduce (12, [TS 27])), ((17, 11), Reduce (12, [TS 27])), ((17, 15), Reduce (12, [TS 27])), ((17, 16), Reduce (12, [TS 27])), ((17, 17), Reduce (12, [TS 27])), ((17, 18), Reduce (12, [TS 27])), ((17, 19), Reduce (12, [TS 27])), ((17, 20), Reduce (12, [TS 27])), ((17, 21), Reduce (12, [TS 27])), ((17, 22), Reduce (12, [TS 27])), ((17, 23), Reduce (12, [TS 27])), ((17, 24), Reduce (12, [TS 27])), ((17, 25), Reduce (12, [TS 27])), ((17, 26), Reduce (12, [TS 27])), ((17, 27), Reduce (12, [TS 27])), ((17, 29), Reduce (12, [TS 27])), ((17, 32), Reduce (12, [TS 27])), ((17, 33), Reduce (12, [TS 27])), ((17, 34), Reduce (12, [TS 27])), ((17, 35), Reduce (12, [TS 27])), ((17, 36), Reduce (12, [TS 27]))
            , ((18, 1), Reduce (12, [TS 26])), ((18, 3), Reduce (12, [TS 26])), ((18, 4), Reduce (12, [TS 26])), ((18, 5), Reduce (12, [TS 26])), ((18, 6), Reduce (12, [TS 26])), ((18, 8), Reduce (12, [TS 26])), ((18, 9), Reduce (12, [TS 26])), ((18, 10), Reduce (12, [TS 26])), ((18, 11), Reduce (12, [TS 26])), ((18, 15), Reduce (12, [TS 26])), ((18, 16), Reduce (12, [TS 26])), ((18, 17), Reduce (12, [TS 26])), ((18, 18), Reduce (12, [TS 26])), ((18, 19), Reduce (12, [TS 26])), ((18, 20), Reduce (12, [TS 26])), ((18, 21), Reduce (12, [TS 26])), ((18, 22), Reduce (12, [TS 26])), ((18, 23), Reduce (12, [TS 26])), ((18, 24), Reduce (12, [TS 26])), ((18, 25), Reduce (12, [TS 26])), ((18, 26), Reduce (12, [TS 26])), ((18, 27), Reduce (12, [TS 26])), ((18, 29), Reduce (12, [TS 26])), ((18, 32), Reduce (12, [TS 26])), ((18, 33), Reduce (12, [TS 26])), ((18, 34), Reduce (12, [TS 26])), ((18, 35), Reduce (12, [TS 26])), ((18, 36), Reduce (12, [TS 26]))
            , ((19, 32), Shift 34)
            , ((20, 1), Reduce (12, [TS 33])), ((20, 3), Reduce (12, [TS 33])), ((20, 4), Reduce (12, [TS 33])), ((20, 5), Reduce (12, [TS 33])), ((20, 8), Reduce (12, [TS 33])), ((20, 9), Reduce (12, [TS 33])), ((20, 10), Reduce (12, [TS 33])), ((20, 11), Reduce (12, [TS 33])), ((20, 15), Reduce (12, [TS 33])), ((20, 16), Reduce (12, [TS 33])), ((20, 17), Reduce (12, [TS 33])), ((20, 18), Reduce (12, [TS 33])), ((20, 19), Reduce (12, [TS 33])), ((20, 20), Reduce (12, [TS 33])), ((20, 21), Reduce (12, [TS 33])), ((20, 22), Reduce (12, [TS 33])), ((20, 23), Reduce (12, [TS 33])), ((20, 24), Reduce (12, [TS 33])), ((20, 25), Reduce (12, [TS 33])), ((20, 26), Reduce (12, [TS 33])), ((20, 27), Reduce (12, [TS 33])), ((20, 28), Shift 44), ((20, 29), Reduce (12, [TS 33])), ((20, 32), Reduce (12, [TS 33])), ((20, 33), Reduce (12, [TS 33])), ((20, 34), Reduce (12, [TS 33])), ((20, 35), Reduce (12, [TS 33])), ((20, 36), Reduce (12, [TS 33]))
            , ((21, 3), Shift 22), ((21, 5), Shift 21), ((21, 6), Shift 39), ((21, 12), Shift 24), ((21, 13), Shift 26), ((21, 14), Shift 29), ((21, 24), Shift 16), ((21, 25), Shift 30), ((21, 26), Shift 18), ((21, 27), Shift 17), ((21, 32), Shift 27), ((21, 33), Shift 38), ((21, 34), Shift 23), ((21, 35), Shift 15), ((21, 36), Shift 28)
            , ((22, 3), Shift 22), ((22, 5), Shift 21), ((22, 12), Shift 24), ((22, 13), Shift 26), ((22, 14), Shift 29), ((22, 24), Shift 16), ((22, 25), Shift 30), ((22, 26), Shift 18), ((22, 27), Shift 17), ((22, 32), Shift 27), ((22, 33), Shift 20), ((22, 34), Shift 23), ((22, 35), Shift 15), ((22, 36), Shift 28)
            , ((23, 1), Reduce (12, [TS 34])), ((23, 3), Reduce (12, [TS 34])), ((23, 4), Reduce (12, [TS 34])), ((23, 5), Reduce (12, [TS 34])), ((23, 6), Reduce (12, [TS 34])), ((23, 8), Reduce (12, [TS 34])), ((23, 9), Reduce (12, [TS 34])), ((23, 10), Reduce (12, [TS 34])), ((23, 11), Reduce (12, [TS 34])), ((23, 15), Reduce (12, [TS 34])), ((23, 16), Reduce (12, [TS 34])), ((23, 17), Reduce (12, [TS 34])), ((23, 18), Reduce (12, [TS 34])), ((23, 19), Reduce (12, [TS 34])), ((23, 20), Reduce (12, [TS 34])), ((23, 21), Reduce (12, [TS 34])), ((23, 22), Reduce (12, [TS 34])), ((23, 23), Reduce (12, [TS 34])), ((23, 24), Reduce (12, [TS 34])), ((23, 25), Reduce (12, [TS 34])), ((23, 26), Reduce (12, [TS 34])), ((23, 27), Reduce (12, [TS 34])), ((23, 29), Reduce (12, [TS 34])), ((23, 32), Reduce (12, [TS 34])), ((23, 33), Reduce (12, [TS 34])), ((23, 34), Reduce (12, [TS 34])), ((23, 35), Reduce (12, [TS 34])), ((23, 36), Reduce (12, [TS 34]))
            , ((24, 3), Shift 22), ((24, 5), Shift 21), ((24, 12), Shift 24), ((24, 13), Shift 26), ((24, 14), Shift 29), ((24, 24), Shift 16), ((24, 25), Shift 30), ((24, 26), Shift 18), ((24, 27), Shift 17), ((24, 32), Shift 27), ((24, 33), Shift 38), ((24, 34), Shift 23), ((24, 35), Shift 15), ((24, 36), Shift 28)
            , ((25, 3), Shift 22), ((25, 5), Shift 21), ((25, 12), Shift 24), ((25, 13), Shift 26), ((25, 14), Shift 29), ((25, 24), Shift 16), ((25, 25), Shift 30), ((25, 26), Shift 18), ((25, 27), Shift 17), ((25, 32), Shift 27), ((25, 33), Shift 20), ((25, 34), Shift 23), ((25, 35), Shift 15), ((25, 36), Shift 28)
            , ((26, 3), Shift 22), ((26, 5), Shift 21), ((26, 12), Shift 24), ((26, 13), Shift 26), ((26, 14), Shift 29), ((26, 24), Shift 16), ((26, 25), Shift 30), ((26, 26), Shift 18), ((26, 27), Shift 17), ((26, 32), Shift 27), ((26, 33), Shift 38), ((26, 34), Shift 23), ((26, 35), Shift 15), ((26, 36), Shift 28)
            , ((27, 1), Reduce (12, [TS 32])), ((27, 3), Reduce (12, [TS 32])), ((27, 4), Reduce (12, [TS 32])), ((27, 5), Reduce (12, [TS 32])), ((27, 6), Reduce (12, [TS 32])), ((27, 8), Reduce (12, [TS 32])), ((27, 9), Reduce (12, [TS 32])), ((27, 10), Reduce (12, [TS 32])), ((27, 11), Reduce (12, [TS 32])), ((27, 15), Reduce (12, [TS 32])), ((27, 16), Reduce (12, [TS 32])), ((27, 17), Reduce (12, [TS 32])), ((27, 18), Reduce (12, [TS 32])), ((27, 19), Reduce (12, [TS 32])), ((27, 20), Reduce (12, [TS 32])), ((27, 21), Reduce (12, [TS 32])), ((27, 22), Reduce (12, [TS 32])), ((27, 23), Reduce (12, [TS 32])), ((27, 24), Reduce (12, [TS 32])), ((27, 25), Reduce (12, [TS 32])), ((27, 26), Reduce (12, [TS 32])), ((27, 27), Reduce (12, [TS 32])), ((27, 29), Reduce (12, [TS 32])), ((27, 32), Reduce (12, [TS 32])), ((27, 33), Reduce (12, [TS 32])), ((27, 34), Reduce (12, [TS 32])), ((27, 35), Reduce (12, [TS 32])), ((27, 36), Reduce (12, [TS 32]))
            , ((28, 1), Reduce (12, [TS 36])), ((28, 3), Reduce (12, [TS 36])), ((28, 4), Reduce (12, [TS 36])), ((28, 5), Reduce (12, [TS 36])), ((28, 6), Reduce (12, [TS 36])), ((28, 8), Reduce (12, [TS 36])), ((28, 9), Reduce (12, [TS 36])), ((28, 10), Reduce (12, [TS 36])), ((28, 11), Reduce (12, [TS 36])), ((28, 15), Reduce (12, [TS 36])), ((28, 16), Reduce (12, [TS 36])), ((28, 17), Reduce (12, [TS 36])), ((28, 18), Reduce (12, [TS 36])), ((28, 19), Reduce (12, [TS 36])), ((28, 20), Reduce (12, [TS 36])), ((28, 21), Reduce (12, [TS 36])), ((28, 22), Reduce (12, [TS 36])), ((28, 23), Reduce (12, [TS 36])), ((28, 24), Reduce (12, [TS 36])), ((28, 25), Reduce (12, [TS 36])), ((28, 26), Reduce (12, [TS 36])), ((28, 27), Reduce (12, [TS 36])), ((28, 29), Reduce (12, [TS 36])), ((28, 32), Reduce (12, [TS 36])), ((28, 33), Reduce (12, [TS 36])), ((28, 34), Reduce (12, [TS 36])), ((28, 35), Reduce (12, [TS 36])), ((28, 36), Reduce (12, [TS 36]))
            , ((29, 1), Reduce (11, [TS 14])), ((29, 3), Reduce (11, [TS 14])), ((29, 4), Reduce (11, [TS 14])), ((29, 5), Reduce (11, [TS 14])), ((29, 6), Reduce (11, [TS 14])), ((29, 8), Reduce (11, [TS 14])), ((29, 9), Reduce (11, [TS 14])), ((29, 10), Reduce (11, [TS 14])), ((29, 11), Reduce (11, [TS 14])), ((29, 15), Reduce (11, [TS 14])), ((29, 16), Reduce (11, [TS 14])), ((29, 17), Reduce (11, [TS 14])), ((29, 18), Reduce (11, [TS 14])), ((29, 19), Reduce (11, [TS 14])), ((29, 20), Reduce (11, [TS 14])), ((29, 21), Reduce (11, [TS 14])), ((29, 22), Reduce (11, [TS 14])), ((29, 23), Reduce (11, [TS 14])), ((29, 24), Reduce (11, [TS 14])), ((29, 25), Reduce (11, [TS 14])), ((29, 26), Reduce (11, [TS 14])), ((29, 27), Reduce (11, [TS 14])), ((29, 29), Reduce (11, [TS 14])), ((29, 32), Reduce (11, [TS 14])), ((29, 33), Reduce (11, [TS 14])), ((29, 34), Reduce (11, [TS 14])), ((29, 35), Reduce (11, [TS 14])), ((29, 36), Reduce (11, [TS 14]))
            , ((30, 1), Reduce (12, [TS 25])), ((30, 3), Reduce (12, [TS 25])), ((30, 4), Reduce (12, [TS 25])), ((30, 5), Reduce (12, [TS 25])), ((30, 6), Reduce (12, [TS 25])), ((30, 8), Reduce (12, [TS 25])), ((30, 9), Reduce (12, [TS 25])), ((30, 10), Reduce (12, [TS 25])), ((30, 11), Reduce (12, [TS 25])), ((30, 15), Reduce (12, [TS 25])), ((30, 16), Reduce (12, [TS 25])), ((30, 17), Reduce (12, [TS 25])), ((30, 18), Reduce (12, [TS 25])), ((30, 19), Reduce (12, [TS 25])), ((30, 20), Reduce (12, [TS 25])), ((30, 21), Reduce (12, [TS 25])), ((30, 22), Reduce (12, [TS 25])), ((30, 23), Reduce (12, [TS 25])), ((30, 24), Reduce (12, [TS 25])), ((30, 25), Reduce (12, [TS 25])), ((30, 26), Reduce (12, [TS 25])), ((30, 27), Reduce (12, [TS 25])), ((30, 29), Reduce (12, [TS 25])), ((30, 32), Reduce (12, [TS 25])), ((30, 33), Reduce (12, [TS 25])), ((30, 34), Reduce (12, [TS 25])), ((30, 35), Reduce (12, [TS 25])), ((30, 36), Reduce (12, [TS 25]))
            , ((31, 32), Shift 35)
            , ((32, 0), Reduce (14, [NS 15, NS 14]))
            , ((33, 0), Reduce (15, [NS 3, TS 1])), ((33, 3), Reduce (15, [NS 3, TS 1])), ((33, 5), Reduce (15, [NS 3, TS 1])), ((33, 12), Reduce (15, [NS 3, TS 1])), ((33, 13), Reduce (15, [NS 3, TS 1])), ((33, 14), Reduce (15, [NS 3, TS 1])), ((33, 24), Reduce (15, [NS 3, TS 1])), ((33, 25), Reduce (15, [NS 3, TS 1])), ((33, 26), Reduce (15, [NS 3, TS 1])), ((33, 27), Reduce (15, [NS 3, TS 1])), ((33, 30), Reduce (15, [NS 3, TS 1])), ((33, 31), Reduce (15, [NS 3, TS 1])), ((33, 32), Reduce (15, [NS 3, TS 1])), ((33, 33), Reduce (15, [NS 3, TS 1])), ((33, 34), Reduce (15, [NS 3, TS 1])), ((33, 35), Reduce (15, [NS 3, TS 1])), ((33, 36), Reduce (15, [NS 3, TS 1]))
            , ((34, 3), Shift 63), ((34, 31), Shift 64)
            , ((35, 3), Shift 69), ((35, 32), Shift 70), ((35, 33), Shift 68)
            , ((36, 6), Shift 89)
            , ((37, 6), Reduce (13, [NS 8])), ((37, 9), Shift 71)
            , ((38, 1), Reduce (12, [TS 33])), ((38, 3), Reduce (12, [TS 33])), ((38, 4), Reduce (12, [TS 33])), ((38, 5), Reduce (12, [TS 33])), ((38, 6), Reduce (12, [TS 33])), ((38, 8), Reduce (12, [TS 33])), ((38, 9), Reduce (12, [TS 33])), ((38, 10), Reduce (12, [TS 33])), ((38, 11), Reduce (12, [TS 33])), ((38, 15), Reduce (12, [TS 33])), ((38, 16), Reduce (12, [TS 33])), ((38, 17), Reduce (12, [TS 33])), ((38, 18), Reduce (12, [TS 33])), ((38, 19), Reduce (12, [TS 33])), ((38, 20), Reduce (12, [TS 33])), ((38, 21), Reduce (12, [TS 33])), ((38, 22), Reduce (12, [TS 33])), ((38, 23), Reduce (12, [TS 33])), ((38, 24), Reduce (12, [TS 33])), ((38, 25), Reduce (12, [TS 33])), ((38, 26), Reduce (12, [TS 33])), ((38, 27), Reduce (12, [TS 33])), ((38, 29), Reduce (12, [TS 33])), ((38, 32), Reduce (12, [TS 33])), ((38, 33), Reduce (12, [TS 33])), ((38, 34), Reduce (12, [TS 33])), ((38, 35), Reduce (12, [TS 33])), ((38, 36), Reduce (12, [TS 33]))
            , ((39, 1), Reduce (12, [TS 5, TS 6])), ((39, 3), Reduce (12, [TS 5, TS 6])), ((39, 4), Reduce (12, [TS 5, TS 6])), ((39, 5), Reduce (12, [TS 5, TS 6])), ((39, 6), Reduce (12, [TS 5, TS 6])), ((39, 8), Reduce (12, [TS 5, TS 6])), ((39, 9), Reduce (12, [TS 5, TS 6])), ((39, 10), Reduce (12, [TS 5, TS 6])), ((39, 11), Reduce (12, [TS 5, TS 6])), ((39, 15), Reduce (12, [TS 5, TS 6])), ((39, 16), Reduce (12, [TS 5, TS 6])), ((39, 17), Reduce (12, [TS 5, TS 6])), ((39, 18), Reduce (12, [TS 5, TS 6])), ((39, 19), Reduce (12, [TS 5, TS 6])), ((39, 20), Reduce (12, [TS 5, TS 6])), ((39, 21), Reduce (12, [TS 5, TS 6])), ((39, 22), Reduce (12, [TS 5, TS 6])), ((39, 23), Reduce (12, [TS 5, TS 6])), ((39, 24), Reduce (12, [TS 5, TS 6])), ((39, 25), Reduce (12, [TS 5, TS 6])), ((39, 26), Reduce (12, [TS 5, TS 6])), ((39, 27), Reduce (12, [TS 5, TS 6])), ((39, 29), Reduce (12, [TS 5, TS 6])), ((39, 32), Reduce (12, [TS 5, TS 6])), ((39, 33), Reduce (12, [TS 5, TS 6])), ((39, 34), Reduce (12, [TS 5, TS 6])), ((39, 35), Reduce (12, [TS 5, TS 6])), ((39, 36), Reduce (12, [TS 5, TS 6]))
            , ((40, 1), Shift 72)
            , ((41, 4), Shift 90)
            , ((42, 3), Shift 22), ((42, 5), Shift 21), ((42, 12), Shift 24), ((42, 13), Shift 26), ((42, 14), Shift 29), ((42, 24), Shift 16), ((42, 25), Shift 30), ((42, 26), Shift 18), ((42, 27), Shift 17), ((42, 32), Shift 27), ((42, 33), Shift 20), ((42, 34), Shift 23), ((42, 35), Shift 15), ((42, 36), Shift 28)
            , ((43, 3), Shift 22), ((43, 5), Shift 21), ((43, 12), Shift 24), ((43, 13), Shift 26), ((43, 14), Shift 29), ((43, 24), Shift 16), ((43, 25), Shift 30), ((43, 26), Shift 18), ((43, 27), Shift 17), ((43, 32), Shift 27), ((43, 33), Shift 38), ((43, 34), Shift 23), ((43, 35), Shift 15), ((43, 36), Shift 28)
            , ((44, 3), Shift 22), ((44, 5), Shift 21), ((44, 12), Shift 24), ((44, 13), Shift 26), ((44, 14), Shift 29), ((44, 24), Shift 16), ((44, 25), Shift 30), ((44, 26), Shift 18), ((44, 27), Shift 17), ((44, 32), Shift 27), ((44, 33), Shift 20), ((44, 34), Shift 23), ((44, 35), Shift 15), ((44, 36), Shift 28)
            , ((45, 3), Shift 22), ((45, 5), Shift 21), ((45, 12), Shift 24), ((45, 13), Shift 26), ((45, 14), Shift 29), ((45, 24), Shift 16), ((45, 25), Shift 30), ((45, 26), Shift 18), ((45, 27), Shift 17), ((45, 32), Shift 27), ((45, 33), Shift 38), ((45, 34), Shift 23), ((45, 35), Shift 15), ((45, 36), Shift 28)
            , ((46, 3), Shift 22), ((46, 5), Shift 21), ((46, 12), Shift 24), ((46, 13), Shift 26), ((46, 14), Shift 29), ((46, 24), Shift 16), ((46, 25), Shift 30), ((46, 26), Shift 18), ((46, 27), Shift 17), ((46, 32), Shift 27), ((46, 33), Shift 38), ((46, 34), Shift 23), ((46, 35), Shift 15), ((46, 36), Shift 28)
            , ((47, 3), Shift 22), ((47, 5), Shift 21), ((47, 12), Shift 24), ((47, 13), Shift 26), ((47, 14), Shift 29), ((47, 24), Shift 16), ((47, 25), Shift 30), ((47, 26), Shift 18), ((47, 27), Shift 17), ((47, 32), Shift 27), ((47, 33), Shift 38), ((47, 34), Shift 23), ((47, 35), Shift 15), ((47, 36), Shift 28)
            , ((48, 1), Reduce (8, [TS 12, NS 8])), ((48, 4), Reduce (8, [TS 12, NS 8])), ((48, 6), Reduce (8, [TS 12, NS 8])), ((48, 8), Reduce (8, [TS 12, NS 8])), ((48, 9), Reduce (8, [TS 12, NS 8])), ((48, 10), Reduce (8, [TS 12, NS 8])), ((48, 11), Reduce (8, [TS 12, NS 8])), ((48, 29), Reduce (8, [TS 12, NS 8]))
            , ((49, 1), Reduce (8, [TS 13, NS 8])), ((49, 4), Reduce (8, [TS 13, NS 8])), ((49, 6), Reduce (8, [TS 13, NS 8])), ((49, 8), Reduce (8, [TS 13, NS 8])), ((49, 9), Reduce (8, [TS 13, NS 8])), ((49, 10), Reduce (8, [TS 13, NS 8])), ((49, 11), Reduce (8, [TS 13, NS 8])), ((49, 29), Reduce (8, [TS 13, NS 8]))
            , ((50, 3), Shift 22), ((50, 5), Shift 21), ((50, 14), Shift 29), ((50, 24), Shift 16), ((50, 25), Shift 30), ((50, 26), Shift 18), ((50, 27), Shift 17), ((50, 32), Shift 27), ((50, 33), Shift 38), ((50, 34), Shift 23), ((50, 35), Shift 15), ((50, 36), Shift 28)
            , ((51, 3), Shift 22), ((51, 5), Shift 21), ((51, 14), Shift 29), ((51, 24), Shift 16), ((51, 25), Shift 30), ((51, 26), Shift 18), ((51, 27), Shift 17), ((51, 32), Shift 27), ((51, 33), Shift 38), ((51, 34), Shift 23), ((51, 35), Shift 15), ((51, 36), Shift 28)
            , ((52, 3), Shift 22), ((52, 5), Shift 21), ((52, 14), Shift 29), ((52, 24), Shift 16), ((52, 25), Shift 30), ((52, 26), Shift 18), ((52, 27), Shift 17), ((52, 32), Shift 27), ((52, 33), Shift 38), ((52, 34), Shift 23), ((52, 35), Shift 15), ((52, 36), Shift 28)
            , ((53, 3), Shift 22), ((53, 5), Shift 21), ((53, 14), Shift 29), ((53, 24), Shift 16), ((53, 25), Shift 30), ((53, 26), Shift 18), ((53, 27), Shift 17), ((53, 32), Shift 27), ((53, 33), Shift 38), ((53, 34), Shift 23), ((53, 35), Shift 15), ((53, 36), Shift 28)
            , ((54, 3), Shift 22), ((54, 5), Shift 21), ((54, 14), Shift 29), ((54, 24), Shift 16), ((54, 25), Shift 30), ((54, 26), Shift 18), ((54, 27), Shift 17), ((54, 32), Shift 27), ((54, 33), Shift 38), ((54, 34), Shift 23), ((54, 35), Shift 15), ((54, 36), Shift 28)
            , ((55, 3), Shift 22), ((55, 5), Shift 21), ((55, 14), Shift 29), ((55, 24), Shift 16), ((55, 25), Shift 30), ((55, 26), Shift 18), ((55, 27), Shift 17), ((55, 32), Shift 27), ((55, 33), Shift 38), ((55, 34), Shift 23), ((55, 35), Shift 15), ((55, 36), Shift 28)
            , ((56, 3), Shift 22), ((56, 5), Shift 21), ((56, 14), Shift 29), ((56, 24), Shift 16), ((56, 25), Shift 30), ((56, 26), Shift 18), ((56, 27), Shift 17), ((56, 32), Shift 27), ((56, 33), Shift 38), ((56, 34), Shift 23), ((56, 35), Shift 15), ((56, 36), Shift 28)
            , ((57, 3), Shift 22), ((57, 5), Shift 21), ((57, 14), Shift 29), ((57, 24), Shift 16), ((57, 25), Shift 30), ((57, 26), Shift 18), ((57, 27), Shift 17), ((57, 32), Shift 27), ((57, 33), Shift 38), ((57, 34), Shift 23), ((57, 35), Shift 15), ((57, 36), Shift 28)
            , ((58, 3), Shift 22), ((58, 5), Shift 21), ((58, 14), Shift 29), ((58, 24), Shift 16), ((58, 25), Shift 30), ((58, 26), Shift 18), ((58, 27), Shift 17), ((58, 32), Shift 27), ((58, 33), Shift 38), ((58, 34), Shift 23), ((58, 35), Shift 15), ((58, 36), Shift 28)
            , ((59, 1), Reduce (11, [NS 11, NS 12])), ((59, 3), Reduce (11, [NS 11, NS 12])), ((59, 4), Reduce (11, [NS 11, NS 12])), ((59, 5), Reduce (11, [NS 11, NS 12])), ((59, 6), Reduce (11, [NS 11, NS 12])), ((59, 8), Reduce (11, [NS 11, NS 12])), ((59, 9), Reduce (11, [NS 11, NS 12])), ((59, 10), Reduce (11, [NS 11, NS 12])), ((59, 11), Reduce (11, [NS 11, NS 12])), ((59, 15), Reduce (11, [NS 11, NS 12])), ((59, 16), Reduce (11, [NS 11, NS 12])), ((59, 17), Reduce (11, [NS 11, NS 12])), ((59, 18), Reduce (11, [NS 11, NS 12])), ((59, 19), Reduce (11, [NS 11, NS 12])), ((59, 20), Reduce (11, [NS 11, NS 12])), ((59, 21), Reduce (11, [NS 11, NS 12])), ((59, 22), Reduce (11, [NS 11, NS 12])), ((59, 23), Reduce (11, [NS 11, NS 12])), ((59, 24), Reduce (11, [NS 11, NS 12])), ((59, 25), Reduce (11, [NS 11, NS 12])), ((59, 26), Reduce (11, [NS 11, NS 12])), ((59, 27), Reduce (11, [NS 11, NS 12])), ((59, 29), Reduce (11, [NS 11, NS 12])), ((59, 32), Reduce (11, [NS 11, NS 12])), ((59, 33), Reduce (11, [NS 11, NS 12])), ((59, 34), Reduce (11, [NS 11, NS 12])), ((59, 35), Reduce (11, [NS 11, NS 12])), ((59, 36), Reduce (11, [NS 11, NS 12]))
            , ((60, 28), Shift 88)
            , ((61, 1), Shift 91)
            , ((62, 1), Reduce (16, [NS 17])), ((62, 2), Shift 94), ((62, 4), Reduce (16, [NS 17]))
            , ((63, 3), Shift 63), ((63, 31), Shift 64)
            , ((64, 1), Reduce (17, [TS 31])), ((64, 2), Reduce (17, [TS 31])), ((64, 4), Reduce (17, [TS 31]))
            , ((65, 1), Shift 92)
            , ((66, 1), Reduce (18, [NS 19])), ((66, 2), Shift 99), ((66, 3), Shift 69), ((66, 4), Reduce (18, [NS 19])), ((66, 32), Shift 70), ((66, 33), Shift 68)
            , ((67, 1), Reduce (19, [NS 20])), ((67, 2), Reduce (19, [NS 20])), ((67, 3), Reduce (19, [NS 20])), ((67, 4), Reduce (19, [NS 20])), ((67, 32), Reduce (19, [NS 20])), ((67, 33), Reduce (19, [NS 20]))
            , ((68, 1), Reduce (20, [TS 33])), ((68, 2), Reduce (20, [TS 33])), ((68, 3), Reduce (20, [TS 33])), ((68, 4), Reduce (20, [TS 33])), ((68, 32), Reduce (20, [TS 33])), ((68, 33), Reduce (20, [TS 33]))
            , ((69, 3), Shift 69), ((69, 32), Shift 70), ((69, 33), Shift 68)
            , ((70, 1), Reduce (20, [TS 32])), ((70, 2), Reduce (20, [TS 32])), ((70, 3), Reduce (20, [TS 32])), ((70, 4), Reduce (20, [TS 32])), ((70, 32), Reduce (20, [TS 32])), ((70, 33), Reduce (20, [TS 32]))
            , ((71, 3), Shift 22), ((71, 5), Shift 21), ((71, 12), Shift 24), ((71, 13), Shift 26), ((71, 14), Shift 29), ((71, 24), Shift 16), ((71, 25), Shift 30), ((71, 26), Shift 18), ((71, 27), Shift 17), ((71, 32), Shift 27), ((71, 33), Shift 38), ((71, 34), Shift 23), ((71, 35), Shift 15), ((71, 36), Shift 28)
            , ((72, 0), Reduce (2, [TS 7, NS 3, TS 1]))
            , ((73, 1), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 3), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 4), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 5), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 6), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 8), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 9), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 10), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 11), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 15), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 16), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 17), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 18), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 19), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 20), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 21), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 22), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 23), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 24), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 25), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 26), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 27), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 29), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 32), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 33), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 34), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 35), Reduce (3, [NS 4, TS 8, NS 3])), ((73, 36), Reduce (3, [NS 4, TS 8, NS 3]))
            , ((74, 1), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 3), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 4), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 5), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 6), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 8), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 9), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 10), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 11), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 15), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 16), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 17), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 18), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 19), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 20), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 21), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 22), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 23), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 24), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 25), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 26), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 27), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 29), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 32), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 33), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 34), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 35), Reduce (3, [TS 33, TS 28, NS 3])), ((74, 36), Reduce (3, [TS 33, TS 28, NS 3]))
            , ((75, 1), Reduce (4, [NS 4, TS 10, NS 5])), ((75, 4), Reduce (4, [NS 4, TS 10, NS 5])), ((75, 8), Reduce (4, [NS 4, TS 10, NS 5])), ((75, 10), Reduce (4, [NS 4, TS 10, NS 5]))
            , ((76, 1), Reduce (5, [NS 6, TS 11, NS 5])), ((76, 4), Reduce (5, [NS 6, TS 11, NS 5])), ((76, 8), Reduce (5, [NS 6, TS 11, NS 5])), ((76, 10), Reduce (5, [NS 6, TS 11, NS 5]))
            , ((77, 1), Reduce (6, [NS 6, TS 9, NS 7])), ((77, 4), Reduce (6, [NS 6, TS 9, NS 7])), ((77, 8), Reduce (6, [NS 6, TS 9, NS 7])), ((77, 9), Reduce (6, [NS 6, TS 9, NS 7])), ((77, 10), Reduce (6, [NS 6, TS 9, NS 7])), ((77, 11), Reduce (6, [NS 6, TS 9, NS 7]))
            , ((78, 1), Reduce (7, [NS 8, TS 29, NS 7])), ((78, 4), Reduce (7, [NS 8, TS 29, NS 7])), ((78, 8), Reduce (7, [NS 8, TS 29, NS 7])), ((78, 9), Reduce (7, [NS 8, TS 29, NS 7])), ((78, 10), Reduce (7, [NS 8, TS 29, NS 7])), ((78, 11), Reduce (7, [NS 8, TS 29, NS 7]))
            , ((79, 1), Reduce (8, [NS 9, TS 15, NS 9])), ((79, 4), Reduce (8, [NS 9, TS 15, NS 9])), ((79, 6), Reduce (8, [NS 9, TS 15, NS 9])), ((79, 8), Reduce (8, [NS 9, TS 15, NS 9])), ((79, 9), Reduce (8, [NS 9, TS 15, NS 9])), ((79, 10), Reduce (8, [NS 9, TS 15, NS 9])), ((79, 11), Reduce (8, [NS 9, TS 15, NS 9])), ((79, 20), Shift 56), ((79, 21), Shift 55), ((79, 29), Reduce (8, [NS 9, TS 15, NS 9]))
            , ((80, 1), Reduce (8, [NS 9, TS 18, NS 9])), ((80, 4), Reduce (8, [NS 9, TS 18, NS 9])), ((80, 6), Reduce (8, [NS 9, TS 18, NS 9])), ((80, 8), Reduce (8, [NS 9, TS 18, NS 9])), ((80, 9), Reduce (8, [NS 9, TS 18, NS 9])), ((80, 10), Reduce (8, [NS 9, TS 18, NS 9])), ((80, 11), Reduce (8, [NS 9, TS 18, NS 9])), ((80, 20), Shift 56), ((80, 21), Shift 55), ((80, 29), Reduce (8, [NS 9, TS 18, NS 9]))
            , ((81, 1), Reduce (8, [NS 9, TS 19, NS 9])), ((81, 4), Reduce (8, [NS 9, TS 19, NS 9])), ((81, 6), Reduce (8, [NS 9, TS 19, NS 9])), ((81, 8), Reduce (8, [NS 9, TS 19, NS 9])), ((81, 9), Reduce (8, [NS 9, TS 19, NS 9])), ((81, 10), Reduce (8, [NS 9, TS 19, NS 9])), ((81, 11), Reduce (8, [NS 9, TS 19, NS 9])), ((81, 20), Shift 56), ((81, 21), Shift 55), ((81, 29), Reduce (8, [NS 9, TS 19, NS 9]))
            , ((82, 1), Reduce (8, [NS 9, TS 16, NS 9])), ((82, 4), Reduce (8, [NS 9, TS 16, NS 9])), ((82, 6), Reduce (8, [NS 9, TS 16, NS 9])), ((82, 8), Reduce (8, [NS 9, TS 16, NS 9])), ((82, 9), Reduce (8, [NS 9, TS 16, NS 9])), ((82, 10), Reduce (8, [NS 9, TS 16, NS 9])), ((82, 11), Reduce (8, [NS 9, TS 16, NS 9])), ((82, 20), Shift 56), ((82, 21), Shift 55), ((82, 29), Reduce (8, [NS 9, TS 16, NS 9]))
            , ((83, 1), Reduce (8, [NS 9, TS 17, NS 9])), ((83, 4), Reduce (8, [NS 9, TS 17, NS 9])), ((83, 6), Reduce (8, [NS 9, TS 17, NS 9])), ((83, 8), Reduce (8, [NS 9, TS 17, NS 9])), ((83, 9), Reduce (8, [NS 9, TS 17, NS 9])), ((83, 10), Reduce (8, [NS 9, TS 17, NS 9])), ((83, 11), Reduce (8, [NS 9, TS 17, NS 9])), ((83, 20), Shift 56), ((83, 21), Shift 55), ((83, 29), Reduce (8, [NS 9, TS 17, NS 9]))
            , ((84, 1), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 4), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 6), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 8), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 9), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 10), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 11), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 15), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 16), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 17), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 18), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 19), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 20), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 21), Reduce (9, [NS 9, TS 21, NS 10])), ((84, 22), Shift 58), ((84, 23), Shift 57), ((84, 29), Reduce (9, [NS 9, TS 21, NS 10]))
            , ((85, 1), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 4), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 6), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 8), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 9), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 10), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 11), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 15), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 16), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 17), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 18), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 19), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 20), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 21), Reduce (9, [NS 9, TS 20, NS 10])), ((85, 22), Shift 58), ((85, 23), Shift 57), ((85, 29), Reduce (9, [NS 9, TS 20, NS 10]))
            , ((86, 1), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 3), Shift 22), ((86, 4), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 5), Shift 21), ((86, 6), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 8), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 9), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 10), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 11), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 15), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 16), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 17), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 18), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 19), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 20), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 21), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 22), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 23), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 24), Shift 16), ((86, 25), Shift 30), ((86, 26), Shift 18), ((86, 27), Shift 17), ((86, 29), Reduce (10, [NS 10, TS 23, NS 11])), ((86, 32), Shift 27), ((86, 33), Shift 38), ((86, 34), Shift 23), ((86, 35), Shift 15), ((86, 36), Shift 28)
            , ((87, 1), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 3), Shift 22), ((87, 4), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 5), Shift 21), ((87, 6), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 8), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 9), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 10), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 11), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 15), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 16), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 17), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 18), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 19), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 20), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 21), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 22), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 23), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 24), Shift 16), ((87, 25), Shift 30), ((87, 26), Shift 18), ((87, 27), Shift 17), ((87, 29), Reduce (10, [NS 10, TS 22, NS 11])), ((87, 32), Shift 27), ((87, 33), Shift 38), ((87, 34), Shift 23), ((87, 35), Shift 15), ((87, 36), Shift 28)
            , ((88, 3), Shift 22), ((88, 5), Shift 21), ((88, 12), Shift 24), ((88, 13), Shift 26), ((88, 14), Shift 29), ((88, 24), Shift 16), ((88, 25), Shift 30), ((88, 26), Shift 18), ((88, 27), Shift 17), ((88, 32), Shift 27), ((88, 33), Shift 20), ((88, 34), Shift 23), ((88, 35), Shift 15), ((88, 36), Shift 28)
            , ((89, 1), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 3), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 4), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 5), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 6), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 8), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 9), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 10), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 11), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 15), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 16), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 17), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 18), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 19), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 20), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 21), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 22), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 23), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 24), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 25), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 26), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 27), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 29), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 32), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 33), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 34), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 35), Reduce (12, [TS 5, NS 13, TS 6])), ((89, 36), Reduce (12, [TS 5, NS 13, TS 6]))
            , ((90, 1), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 3), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 4), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 5), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 6), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 8), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 9), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 10), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 11), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 15), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 16), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 17), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 18), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 19), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 20), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 21), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 22), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 23), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 24), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 25), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 26), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 27), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 29), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 32), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 33), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 34), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 35), Reduce (12, [TS 3, NS 3, TS 4])), ((90, 36), Reduce (12, [TS 3, NS 3, TS 4]))
            , ((91, 0), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 3), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 5), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 12), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 13), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 14), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 24), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 25), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 26), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 27), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 30), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 31), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 32), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 33), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 34), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 35), Reduce (15, [TS 30, TS 32, NS 16, TS 1])), ((91, 36), Reduce (15, [TS 30, TS 32, NS 16, TS 1]))
            , ((92, 0), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 3), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 5), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 12), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 13), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 14), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 24), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 25), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 26), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 27), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 30), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 31), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 32), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 33), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 34), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 35), Reduce (15, [TS 31, TS 32, NS 18, TS 1])), ((92, 36), Reduce (15, [TS 31, TS 32, NS 18, TS 1]))
            , ((93, 4), Shift 101)
            , ((94, 3), Shift 63), ((94, 31), Shift 64)
            , ((95, 6), Reduce (13, [NS 8, TS 9, NS 13]))
            , ((96, 1), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 3), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 4), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 5), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 6), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 8), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 9), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 10), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 11), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 15), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 16), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 17), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 18), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 19), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 20), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 21), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 22), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 23), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 24), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 25), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 26), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 27), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 29), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 32), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 33), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 34), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 35), Reduce (11, [NS 12, TS 33, TS 28, NS 3])), ((96, 36), Reduce (11, [NS 12, TS 33, TS 28, NS 3]))
            , ((97, 4), Shift 103)
            , ((98, 1), Reduce (19, [NS 19, NS 20])), ((98, 2), Reduce (19, [NS 19, NS 20])), ((98, 3), Reduce (19, [NS 19, NS 20])), ((98, 4), Reduce (19, [NS 19, NS 20])), ((98, 32), Reduce (19, [NS 19, NS 20])), ((98, 33), Reduce (19, [NS 19, NS 20]))
            , ((99, 3), Shift 69), ((99, 32), Shift 70), ((99, 33), Shift 68)
            , ((100, 1), Reduce (16, [NS 17, TS 2, NS 16])), ((100, 4), Reduce (16, [NS 17, TS 2, NS 16]))
            , ((101, 1), Reduce (17, [TS 3, NS 16, TS 4])), ((101, 2), Reduce (17, [TS 3, NS 16, TS 4])), ((101, 4), Reduce (17, [TS 3, NS 16, TS 4]))
            , ((102, 1), Reduce (18, [NS 19, TS 2, NS 18])), ((102, 4), Reduce (18, [NS 19, TS 2, NS 18]))
            , ((103, 1), Reduce (20, [TS 3, NS 18, TS 4])), ((103, 2), Reduce (20, [TS 3, NS 18, TS 4])), ((103, 3), Reduce (20, [TS 3, NS 18, TS 4])), ((103, 4), Reduce (20, [TS 3, NS 18, TS 4])), ((103, 32), Reduce (20, [TS 3, NS 18, TS 4])), ((103, 33), Reduce (20, [TS 3, NS 18, TS 4]))
            ]
        , getReduceTable = YMap.fromAscList 
            [ ((0, 1), 14), ((0, 2), 2), ((0, 3), 3), ((0, 4), 4), ((0, 5), 5), ((0, 6), 6), ((0, 7), 7), ((0, 8), 8), ((0, 9), 9), ((0, 10), 10), ((0, 11), 11), ((0, 12), 12), ((0, 14), 13), ((0, 15), 1)
            , ((1, 3), 3), ((1, 4), 4), ((1, 5), 5), ((1, 6), 6), ((1, 7), 7), ((1, 8), 8), ((1, 9), 9), ((1, 10), 10), ((1, 11), 11), ((1, 12), 12), ((1, 14), 32), ((1, 15), 1)
            , ((11, 12), 59)
            , ((21, 8), 37), ((21, 9), 9), ((21, 10), 10), ((21, 11), 11), ((21, 12), 12), ((21, 13), 36)
            , ((22, 3), 41), ((22, 4), 4), ((22, 5), 5), ((22, 6), 6), ((22, 7), 7), ((22, 8), 8), ((22, 9), 9), ((22, 10), 10), ((22, 11), 11), ((22, 12), 12)
            , ((24, 8), 48), ((24, 9), 9), ((24, 10), 10), ((24, 11), 11), ((24, 12), 12)
            , ((25, 3), 40), ((25, 4), 4), ((25, 5), 5), ((25, 6), 6), ((25, 7), 7), ((25, 8), 8), ((25, 9), 9), ((25, 10), 10), ((25, 11), 11), ((25, 12), 12)
            , ((26, 8), 49), ((26, 9), 9), ((26, 10), 10), ((26, 11), 11), ((26, 12), 12)
            , ((34, 16), 61), ((34, 17), 62)
            , ((35, 18), 65), ((35, 19), 66), ((35, 20), 67)
            , ((42, 3), 73), ((42, 4), 4), ((42, 5), 5), ((42, 6), 6), ((42, 7), 7), ((42, 8), 8), ((42, 9), 9), ((42, 10), 10), ((42, 11), 11), ((42, 12), 12)
            , ((43, 5), 75), ((43, 6), 6), ((43, 7), 7), ((43, 8), 8), ((43, 9), 9), ((43, 10), 10), ((43, 11), 11), ((43, 12), 12)
            , ((44, 3), 74), ((44, 4), 4), ((44, 5), 5), ((44, 6), 6), ((44, 7), 7), ((44, 8), 8), ((44, 9), 9), ((44, 10), 10), ((44, 11), 11), ((44, 12), 12)
            , ((45, 7), 77), ((45, 8), 8), ((45, 9), 9), ((45, 10), 10), ((45, 11), 11), ((45, 12), 12)
            , ((46, 5), 76), ((46, 6), 6), ((46, 7), 7), ((46, 8), 8), ((46, 9), 9), ((46, 10), 10), ((46, 11), 11), ((46, 12), 12)
            , ((47, 7), 78), ((47, 8), 8), ((47, 9), 9), ((47, 10), 10), ((47, 11), 11), ((47, 12), 12)
            , ((50, 9), 79), ((50, 10), 10), ((50, 11), 11), ((50, 12), 12)
            , ((51, 9), 80), ((51, 10), 10), ((51, 11), 11), ((51, 12), 12)
            , ((52, 9), 81), ((52, 10), 10), ((52, 11), 11), ((52, 12), 12)
            , ((53, 9), 82), ((53, 10), 10), ((53, 11), 11), ((53, 12), 12)
            , ((54, 9), 83), ((54, 10), 10), ((54, 11), 11), ((54, 12), 12)
            , ((55, 10), 84), ((55, 11), 11), ((55, 12), 12)
            , ((56, 10), 85), ((56, 11), 11), ((56, 12), 12)
            , ((57, 11), 86), ((57, 12), 12)
            , ((58, 11), 87), ((58, 12), 12)
            , ((63, 16), 93), ((63, 17), 62)
            , ((66, 20), 98)
            , ((69, 18), 97), ((69, 19), 66), ((69, 20), 67)
            , ((71, 8), 37), ((71, 9), 9), ((71, 10), 10), ((71, 11), 11), ((71, 12), 12), ((71, 13), 95)
            , ((86, 12), 59)
            , ((87, 12), 59)
            , ((88, 3), 96), ((88, 4), 4), ((88, 5), 5), ((88, 6), 6), ((88, 7), 7), ((88, 8), 8), ((88, 9), 9), ((88, 10), 10), ((88, 11), 11), ((88, 12), 12)
            , ((94, 16), 100), ((94, 17), 62)
            , ((99, 18), 102), ((99, 19), 66), ((99, 20), 67)
            ]
        }

