\hshead {
    module ALPHA2.PlanHolParser where

    import ALPHA2.Header
    import ALPHA2.PlanHolLexer
}

\target {
    token-type: "Token"
    parser-name: "runHolParser"
    result-type: "Either TermRep [DeclRep]"
    start: $Either $Query ($Sequence $Decl)
    terminals:
        "T_dot loc": $dot 0 none
        "T_arrow loc": $arrow 0 none
        "T_lparen loc": $lparen 0 none
        "T_rparen loc": $rparen 0 none
        "T_lbracket loc": $lbracket 0 none
        "T_rbracket loc": $rbracket 0 none
        "T_quest loc": $quest 0 none
        "T_if loc": $if 0 none
        "T_comma loc": $comma 0 none
        "T_semicolon loc": $semicolon 0 none
        "T_fatarrow loc": $fatarrow 0 none
        "T_pi loc": $pi 0 none
        "T_sigma loc": $sigma 0 none
        "T_succ loc": $succ 0 none
        "T_eq loc": $eq 0 none
        "T_le loc": $le 0 none
        "T_lt loc": $lt 0 none
        "T_ge loc": $ge 0 none
        "T_gt loc": $gt 0 none
        "T_plus loc": $plus 0 none
        "T_minus loc": $minus 0 none
        "T_star loc": $star 0 none
        "T_slash loc": $slash 0 none
        "T_cut loc": $cut 0 none
        "T_true loc": $true 0 none
        "T_fail loc": $fail 0 none
        "T_is loc": $is 0 none
        "T_debug loc": $debug 0 none
        "T_bslash loc": $bslash 0 none
        "T_cons loc": $cons 0 none
        "T_kind loc": $kind 0 none
        "T_type loc": $type 0 none
        "T_id loc contents": $id 0 none
        "T_nat_lit loc contents": $natlit 0 none
        "T_chr_lit loc contents": $chrlit 0 none
        "T_str_lit loc contents": $strlit 0 none
}

\define $Query : "TermRep" {
    95 [$quest, $TermRep0, $dot]:
        $2
}

\define $Decl : "DeclRep" {
    95 [$kind, $id, $KindRep0, $dot]:
        RKindDecl ($1.loc <> $4.loc) (TC_Named $2.contents) $3
    95 [$type, $id, $TypeRep0, $dot]:
        RTypeDecl ($1.loc <> $4.loc) (DC_Named $2.contents) $3
    95 [$TermRep0, $dot]:
        RFactDecl (getSLoc $1 <> $2.loc) $1
}

\define $KindRep0 : "KindRep" {
    80 [$KindRep1, $arrow, $KindRep0]:
        RKArr (getSLoc $1 <> getSLoc $3) $1 $3
    80 [$KindRep1]:
        $1
}

\define $KindRep1 : "KindRep" {
    75 [$type]:
        RStar $1.loc
    75 [$lparen, $KindRep0, $rparen]:
        RKPrn ($1.loc <> $3.loc) $2
}

\define $TypeRep0 : "TypeRep" {
    80 [$TypeRep1, $arrow, $TypeRep0]:
        RTyApp (getSLoc $1 <> getSLoc $3) (RTyApp (getSLoc $1 <> $2.loc) (RTyCon $2.loc TC_Arrow) $1) $3
    80 [$TypeRep1]:
        $1
}

\define $TypeRep1 : "TypeRep" {
    75 [$TypeRep1, $TypeRep2]:
        RTyApp (getSLoc $1 <> getSLoc $2) $1 $2
    75 [$TypeRep2]:
        $1
}

\define $TypeRep2 : "TypeRep" {
    70 [$id]:
        if head $1.contents `elem` ['A' .. 'Z'] then RTyVar $1.loc $1.contents else RTyCon $1.loc (TC_Named $1.contents)
    70 [$lparen, $TypeRep0, $rparen]:
        RTyPrn ($1.loc <> $3.loc) $2
}

\define $TermRep0 : "TermRep" {
    80 [$id, $bslash, $TermRep0]:
        RAbs ($1.loc <> getSLoc $3) $1.contents $3
    80 [$TermRep5, $if, $TermRep0]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc (DC_LO LO_if)) $1) $3
    80 [$TermRep1]:
        $1
}

\define $TermRep1 : "TermRep" {
    75 [$TermRep1, $semicolon, $TermRep2]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc (DC_LO LO_or)) $1) $3
    75 [$TermRep2]:
        $1
}

\define $TermRep2 : "TermRep" {
    70 [$TermRep3, $fatarrow, $TermRep2]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc (DC_LO LO_imply)) $1) $3
    70 [$TermRep3]:
        $1
}

\define $TermRep3 : "TermRep" {
    65 [$TermRep3, $comma, $TermRep4]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc (DC_LO LO_and)) $1) $3
    65 [$TermRep4]:
        $1
}

\define $TermRep4 : "TermRep" {
    60 [$TermRep5, $cons, $TermRep4]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc DC_Cons) $1) $3
    60 [$TermRep5]:
        $1
}

\define $TermRep5 : "TermRep" {
    55 [$TermRep6, $is, $TermRep6]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc (DC_LO LO_is)) $1) $3
    55 [$TermRep6, $eq, $TermRep6]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc DC_eq) $1) $3
    55 [$TermRep6, $le, $TermRep6]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc DC_le) $1) $3
    55 [$TermRep6, $lt, $TermRep6]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc DC_lt) $1) $3
    55 [$TermRep6, $ge, $TermRep6]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc DC_ge) $1) $3
    55 [$TermRep6, $gt, $TermRep6]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc DC_gt) $1) $3
    55 [$TermRep6]:
        $1
}

\define $TermRep6 : "TermRep" {
    50 [$TermRep6, $plus, $TermRep7]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc DC_plus) $1) $3
    50 [$TermRep6, $minus, $TermRep7]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc DC_minus) $1) $3
    50 [$TermRep7]:
        $1
}

\define $TermRep7 : "TermRep" {
    45 [$TermRep7, $star, $TermRep8]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc DC_mul) $1) $3
    45 [$TermRep7, $slash, $TermRep8]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc DC_div) $1) $3
    45 [$TermRep8]:
        $1
}

\define $TermRep8 : "TermRep" {
    40 [$TermRep9]:
        $1
    40 [$TermRep8, $id, $bslash, $TermRep0]:
        RApp (getSLoc $1 <> getSLoc $4) $1 (RAbs ($2.loc <> getSLoc $4) $2.contents $4)
}

\define $TermRep9 : "TermRep" {
    10 [$TermRep9, $TermRep10]:
        RApp (getSLoc $1 <> getSLoc $2) $1 $2
    10 [$TermRep10]:
        $1
    10 [$pi]:
        RCon $1.loc (DC_LO LO_pi)
    10 [$sigma]:
        RCon $1.loc (DC_LO LO_sigma)
    10 [$succ]:
        RCon $1.loc DC_Succ
}

\define $TermRep10 : "TermRep" {
    5 [$lparen, $TermRep0, $rparen]:
        RPrn ($1.loc <> $3.loc) $2
    5 [$cut]:
        RCon $1.loc (DC_LO LO_cut)
    5 [$true]:
        RCon $1.loc (DC_LO LO_true)
    5 [$fail]:
        RCon $1.loc (DC_LO LO_fail)
    5 [$debug]:
        RCon $1.loc (DC_LO LO_debug)
    5 [$id]:
        if head $1.contents `elem` ['A' .. 'Z'] then RVar $1.loc $1.contents else RCon $1.loc (DC_Named $1.contents)
    5 [$natlit]:
        mkNatLit $1.loc $1.contents
    5 [$strlit]:
        mkStrLit $1.loc $1.contents
    5 [$chrlit]:
        mkChrLit $1.loc $1.contents
    5 [$lbracket, $rbracket]:
        RCon ($1.loc <> $2.loc) DC_Nil
    5 [$lbracket, $ListBody, $rbracket]:
        RPrn ($1.loc <> $3.loc) $2
}

\define $ListBody : "TermRep" {
    90 [$TermRep5]:
        RApp (getSLoc $1) (RApp (getSLoc $1) (RCon (getSLoc $1) DC_Cons) $1) (RCon (getSLoc $1) DC_Nil)
    90 [$TermRep5, $comma, $ListBody]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc DC_Cons) $1) $3
}

\define $Sequence ($Elem : "a") : "[a]" {
    10 []:
        []
    10 [$Elem, $Sequence $Elem]:
        $1 : $2
}

\define $Either ($Left : "a") ($Right : "b") : "Either a b" {
    10 [$Left]:
        Left $1
    10 [$Right]:
        Right $1
}

\hstail {
}
