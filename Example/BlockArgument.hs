module BlockArgument where

import qualified Control.Monad.Trans.Class as Y
import qualified Control.Monad.Trans.Except as Y
import qualified Control.Monad.Trans.State.Strict as Y
import qualified Data.Map.Strict as YMap
import qualified Data.Set as YSet

data Tok
    = LargeId String
    | SmallId String
    | LParen
    | RParen
    | Lambda
    deriving (Eq, Ord, Show)

data Term
    = Lam String Term
    | App Term Term
    | Var String
    deriving (Eq, Ord, Show)

main :: IO ()
main = do
    let example = [SmallId "sigma", LargeId "X", Lambda, SmallId "p", LargeId "X", LParen, SmallId "q", LargeId "X", RParen]
    print (parser example)

-- the following codes are generated by PGS.

type ParserS = Int

type NSym = Int

type TSym = Int

data Sym
    = NS NSym
    | TS TSym
    deriving (Eq, Ord)

data Action
    = Shift ParserS
    | Reduce (NSym, [Sym])
    | Accept
    deriving (Eq)

data LR1Parser
    = LR1Parser
        { getInitialS :: ParserS
        , getActionTable :: YMap.Map (ParserS, TSym) Action
        , getReduceTable :: YMap.Map (ParserS, NSym) ParserS
        }
    deriving ()

data ParsingTree
    = PTLeaf (Tok)
    | PTBranch NSym [ParsingTree]
    deriving ()

parser :: [Tok] -> Either (Maybe (Tok)) (Term)
parser = fmap (getTerm0) . runLALR1 theLALR1Parser where
    getTerm0 :: ParsingTree -> (Term)
    getTerm0 (PTBranch _ [PTLeaf (LargeId nm_1), PTLeaf (Lambda), _3@(PTBranch guard3 _)])
        | [guard3] `elem` [[1]] = Lam (nm_1) (getTerm0 _3)
    getTerm0 (PTBranch _ [PTLeaf (SmallId nm_1), PTLeaf (Lambda), _3@(PTBranch guard3 _)])
        | [guard3] `elem` [[1]] = Lam (nm_1) (getTerm0 _3)
    getTerm0 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[2]] = (getTerm1 _1)
    getTerm1 :: ParsingTree -> (Term)
    getTerm1 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (LargeId nm_2), PTLeaf (Lambda), _4@(PTBranch guard4 _)])
        | [guard1, guard4] `elem` [[3, 1]] = App (getTerm2 _1) (Lam (nm_2) (getTerm0 _4))
    getTerm1 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (SmallId nm_2), PTLeaf (Lambda), _4@(PTBranch guard4 _)])
        | [guard1, guard4] `elem` [[3, 1]] = App (getTerm2 _1) (Lam (nm_2) (getTerm0 _4))
    getTerm1 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[3]] = (getTerm2 _1)
    getTerm2 :: ParsingTree -> (Term)
    getTerm2 (PTBranch _ [_1@(PTBranch guard1 _), _2@(PTBranch guard2 _)])
        | [guard1, guard2] `elem` [[3, 4]] = App (getTerm2 _1) (getTerm3 _2)
    getTerm2 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[4]] = (getTerm3 _1)
    getTerm3 :: ParsingTree -> (Term)
    getTerm3 (PTBranch _ [PTLeaf (LargeId nm_1)])
        | otherwise = Var (nm_1)
    getTerm3 (PTBranch _ [PTLeaf (SmallId nm_1)])
        | otherwise = Var (nm_1)
    getTerm3 (PTBranch _ [PTLeaf (LParen), _2@(PTBranch guard2 _), PTLeaf (RParen)])
        | [guard2] `elem` [[1]] = (getTerm0 _2)
    toTerminal :: (Tok) -> TSym
    toTerminal (LargeId nm) = 1
    toTerminal (SmallId nm) = 2
    toTerminal (LParen) = 3
    toTerminal (RParen) = 4
    toTerminal (Lambda) = 5
    runLALR1 :: LR1Parser -> [Tok] -> Either (Maybe (Tok)) ParsingTree
    runLALR1 (LR1Parser getInitS getActionT getReduceT) = go where
        loop inputs = do
            let cur = if null inputs then 0 else toTerminal (head inputs)
                exception = Y.lift (if null inputs then Left Nothing else Left (Just (head inputs)))
            (stack, trees) <- Y.get
            case YMap.lookup (head stack, cur) getActionT of
                Nothing -> exception
                Just Accept -> return ()
                Just (Shift top') -> do
                    Y.put (top' : stack, PTLeaf (head inputs) : trees)
                    loop (tail inputs)
                Just (Reduce (lhs, rhs)) -> do
                    let n = length rhs
                    case YMap.lookup (stack !! n, lhs) getReduceT of
                        Nothing -> exception
                        Just top' -> do
                            Y.put (top' : drop n stack, PTBranch lhs (reverse (take n trees)) : drop n trees)
                            loop inputs
        go tokens = do
            (_, (_, result)) <- Y.runStateT (loop tokens) ([getInitS], [])
            case result of
                [output] -> return output
    theLALR1Parser :: LR1Parser
    theLALR1Parser = LR1Parser
        { getInitialS = 0
        , getActionTable = YMap.fromAscList 
            [ ((0, 1), Shift 5), ((0, 2), Shift 7), ((0, 3), Shift 6)
            , ((1, 0), Accept)
            , ((2, 0), Reduce (1, [NS 2])), ((2, 4), Reduce (1, [NS 2]))
            , ((3, 0), Reduce (2, [NS 3])), ((3, 1), Shift 9), ((3, 2), Shift 10), ((3, 3), Shift 6), ((3, 4), Reduce (2, [NS 3]))
            , ((4, 0), Reduce (3, [NS 4])), ((4, 1), Reduce (3, [NS 4])), ((4, 2), Reduce (3, [NS 4])), ((4, 3), Reduce (3, [NS 4])), ((4, 4), Reduce (3, [NS 4]))
            , ((5, 0), Reduce (4, [TS 1])), ((5, 1), Reduce (4, [TS 1])), ((5, 2), Reduce (4, [TS 1])), ((5, 3), Reduce (4, [TS 1])), ((5, 4), Reduce (4, [TS 1])), ((5, 5), Shift 11)
            , ((6, 1), Shift 5), ((6, 2), Shift 7), ((6, 3), Shift 6)
            , ((7, 0), Reduce (4, [TS 2])), ((7, 1), Reduce (4, [TS 2])), ((7, 2), Reduce (4, [TS 2])), ((7, 3), Reduce (4, [TS 2])), ((7, 4), Reduce (4, [TS 2])), ((7, 5), Shift 13)
            , ((8, 0), Reduce (3, [NS 3, NS 4])), ((8, 1), Reduce (3, [NS 3, NS 4])), ((8, 2), Reduce (3, [NS 3, NS 4])), ((8, 3), Reduce (3, [NS 3, NS 4])), ((8, 4), Reduce (3, [NS 3, NS 4]))
            , ((9, 0), Reduce (4, [TS 1])), ((9, 1), Reduce (4, [TS 1])), ((9, 2), Reduce (4, [TS 1])), ((9, 3), Reduce (4, [TS 1])), ((9, 4), Reduce (4, [TS 1])), ((9, 5), Shift 14)
            , ((10, 0), Reduce (4, [TS 2])), ((10, 1), Reduce (4, [TS 2])), ((10, 2), Reduce (4, [TS 2])), ((10, 3), Reduce (4, [TS 2])), ((10, 4), Reduce (4, [TS 2])), ((10, 5), Shift 15)
            , ((11, 1), Shift 5), ((11, 2), Shift 7), ((11, 3), Shift 6)
            , ((12, 4), Shift 17)
            , ((13, 1), Shift 5), ((13, 2), Shift 7), ((13, 3), Shift 6)
            , ((14, 1), Shift 5), ((14, 2), Shift 7), ((14, 3), Shift 6)
            , ((15, 1), Shift 5), ((15, 2), Shift 7), ((15, 3), Shift 6)
            , ((16, 0), Reduce (1, [TS 1, TS 5, NS 1])), ((16, 4), Reduce (1, [TS 1, TS 5, NS 1]))
            , ((17, 0), Reduce (4, [TS 3, NS 1, TS 4])), ((17, 1), Reduce (4, [TS 3, NS 1, TS 4])), ((17, 2), Reduce (4, [TS 3, NS 1, TS 4])), ((17, 3), Reduce (4, [TS 3, NS 1, TS 4])), ((17, 4), Reduce (4, [TS 3, NS 1, TS 4]))
            , ((18, 0), Reduce (1, [TS 2, TS 5, NS 1])), ((18, 4), Reduce (1, [TS 2, TS 5, NS 1]))
            , ((19, 0), Reduce (2, [NS 3, TS 1, TS 5, NS 1])), ((19, 4), Reduce (2, [NS 3, TS 1, TS 5, NS 1]))
            , ((20, 0), Reduce (2, [NS 3, TS 2, TS 5, NS 1])), ((20, 4), Reduce (2, [NS 3, TS 2, TS 5, NS 1]))
            ]
        , getReduceTable = YMap.fromAscList 
            [ ((0, 1), 1), ((0, 2), 2), ((0, 3), 3), ((0, 4), 4)
            , ((3, 4), 8)
            , ((6, 1), 12), ((6, 2), 2), ((6, 3), 3), ((6, 4), 4)
            , ((11, 1), 16), ((11, 2), 2), ((11, 3), 3), ((11, 4), 4)
            , ((13, 1), 18), ((13, 2), 2), ((13, 3), 3), ((13, 4), 4)
            , ((14, 1), 19), ((14, 2), 2), ((14, 3), 3), ((14, 4), 4)
            , ((15, 1), 20), ((15, 2), 2), ((15, 3), 3), ((15, 4), 4)
            ]
        }

{-
getParserSInfo :: ParserS -> ParserSInfo
getParserSInfo 0 = ParserSInfo
    { myItems = 
        [ "<Term0> ::= . <Term1>"
        , "<Term0> ::= . `lid' `lambda' <Term0>"
        , "<Term0> ::= . `sid' `lambda' <Term0>"
        , "<Term1> ::= . <Term2>"
        , "<Term1> ::= . <Term2> `lid' `lambda' <Term0>"
        , "<Term1> ::= . <Term2> `sid' `lambda' <Term0>"
        , "<Term2> ::= . <Term2> <Term3>"
        , "<Term2> ::= . <Term3>"
        , "<Term3> ::= . `lid'"
        , "<Term3> ::= . `lprn' <Term0> `rprn'"
        , "<Term3> ::= . `sid'"
        , "<\\ACCEPT> ::= . <Term0>"
        ]
    , myNexts = 
        [ "<Term0> +-> 1"
        , "<Term1> +-> 2"
        , "<Term2> +-> 3"
        , "<Term3> +-> 4"
        , "`lid' +-> 5"
        , "`lprn' +-> 6"
        , "`sid' +-> 7"
        ]
    }
getParserSInfo 1 = ParserSInfo
    { myItems = 
        [ "<\\ACCEPT> ::= <Term0> ."
        ]
    , myNexts = []
    }
getParserSInfo 2 = ParserSInfo
    { myItems = 
        [ "<Term0> ::= <Term1> ."
        ]
    , myNexts = []
    }
getParserSInfo 3 = ParserSInfo
    { myItems = 
        [ "<Term1> ::= <Term2> ."
        , "<Term1> ::= <Term2> . `lid' `lambda' <Term0>"
        , "<Term1> ::= <Term2> . `sid' `lambda' <Term0>"
        , "<Term2> ::= <Term2> . <Term3>"
        , "<Term3> ::= . `lid'"
        , "<Term3> ::= . `lprn' <Term0> `rprn'"
        , "<Term3> ::= . `sid'"
        ]
    , myNexts = 
        [ "<Term3> +-> 8"
        , "`lid' +-> 9"
        , "`lprn' +-> 6"
        , "`sid' +-> 10"
        ]
    }
getParserSInfo 4 = ParserSInfo
    { myItems = 
        [ "<Term2> ::= <Term3> ."
        ]
    , myNexts = []
    }
getParserSInfo 5 = ParserSInfo
    { myItems = 
        [ "<Term0> ::= `lid' . `lambda' <Term0>"
        , "<Term3> ::= `lid' ."
        ]
    , myNexts = 
        [ "`lambda' +-> 11"
        ]
    }
getParserSInfo 6 = ParserSInfo
    { myItems = 
        [ "<Term0> ::= . <Term1>"
        , "<Term0> ::= . `lid' `lambda' <Term0>"
        , "<Term0> ::= . `sid' `lambda' <Term0>"
        , "<Term1> ::= . <Term2>"
        , "<Term1> ::= . <Term2> `lid' `lambda' <Term0>"
        , "<Term1> ::= . <Term2> `sid' `lambda' <Term0>"
        , "<Term2> ::= . <Term2> <Term3>"
        , "<Term2> ::= . <Term3>"
        , "<Term3> ::= . `lid'"
        , "<Term3> ::= . `lprn' <Term0> `rprn'"
        , "<Term3> ::= . `sid'"
        , "<Term3> ::= `lprn' . <Term0> `rprn'"
        ]
    , myNexts = 
        [ "<Term0> +-> 12"
        , "<Term1> +-> 2"
        , "<Term2> +-> 3"
        , "<Term3> +-> 4"
        , "`lid' +-> 5"
        , "`lprn' +-> 6"
        , "`sid' +-> 7"
        ]
    }
getParserSInfo 7 = ParserSInfo
    { myItems = 
        [ "<Term0> ::= `sid' . `lambda' <Term0>"
        , "<Term3> ::= `sid' ."
        ]
    , myNexts = 
        [ "`lambda' +-> 13"
        ]
    }
getParserSInfo 8 = ParserSInfo
    { myItems = 
        [ "<Term2> ::= <Term2> <Term3> ."
        ]
    , myNexts = []
    }
getParserSInfo 9 = ParserSInfo
    { myItems = 
        [ "<Term1> ::= <Term2> `lid' . `lambda' <Term0>"
        , "<Term3> ::= `lid' ."
        ]
    , myNexts = 
        [ "`lambda' +-> 14"
        ]
    }
getParserSInfo 10 = ParserSInfo
    { myItems = 
        [ "<Term1> ::= <Term2> `sid' . `lambda' <Term0>"
        , "<Term3> ::= `sid' ."
        ]
    , myNexts = 
        [ "`lambda' +-> 15"
        ]
    }
getParserSInfo 11 = ParserSInfo
    { myItems = 
        [ "<Term0> ::= . <Term1>"
        , "<Term0> ::= . `lid' `lambda' <Term0>"
        , "<Term0> ::= . `sid' `lambda' <Term0>"
        , "<Term0> ::= `lid' `lambda' . <Term0>"
        , "<Term1> ::= . <Term2>"
        , "<Term1> ::= . <Term2> `lid' `lambda' <Term0>"
        , "<Term1> ::= . <Term2> `sid' `lambda' <Term0>"
        , "<Term2> ::= . <Term2> <Term3>"
        , "<Term2> ::= . <Term3>"
        , "<Term3> ::= . `lid'"
        , "<Term3> ::= . `lprn' <Term0> `rprn'"
        , "<Term3> ::= . `sid'"
        ]
    , myNexts = 
        [ "<Term0> +-> 16"
        , "<Term1> +-> 2"
        , "<Term2> +-> 3"
        , "<Term3> +-> 4"
        , "`lid' +-> 5"
        , "`lprn' +-> 6"
        , "`sid' +-> 7"
        ]
    }
getParserSInfo 12 = ParserSInfo
    { myItems = 
        [ "<Term3> ::= `lprn' <Term0> . `rprn'"
        ]
    , myNexts = 
        [ "`rprn' +-> 17"
        ]
    }
getParserSInfo 13 = ParserSInfo
    { myItems = 
        [ "<Term0> ::= . <Term1>"
        , "<Term0> ::= . `lid' `lambda' <Term0>"
        , "<Term0> ::= . `sid' `lambda' <Term0>"
        , "<Term0> ::= `sid' `lambda' . <Term0>"
        , "<Term1> ::= . <Term2>"
        , "<Term1> ::= . <Term2> `lid' `lambda' <Term0>"
        , "<Term1> ::= . <Term2> `sid' `lambda' <Term0>"
        , "<Term2> ::= . <Term2> <Term3>"
        , "<Term2> ::= . <Term3>"
        , "<Term3> ::= . `lid'"
        , "<Term3> ::= . `lprn' <Term0> `rprn'"
        , "<Term3> ::= . `sid'"
        ]
    , myNexts = 
        [ "<Term0> +-> 18"
        , "<Term1> +-> 2"
        , "<Term2> +-> 3"
        , "<Term3> +-> 4"
        , "`lid' +-> 5"
        , "`lprn' +-> 6"
        , "`sid' +-> 7"
        ]
    }
getParserSInfo 14 = ParserSInfo
    { myItems = 
        [ "<Term0> ::= . <Term1>"
        , "<Term0> ::= . `lid' `lambda' <Term0>"
        , "<Term0> ::= . `sid' `lambda' <Term0>"
        , "<Term1> ::= . <Term2>"
        , "<Term1> ::= . <Term2> `lid' `lambda' <Term0>"
        , "<Term1> ::= . <Term2> `sid' `lambda' <Term0>"
        , "<Term1> ::= <Term2> `lid' `lambda' . <Term0>"
        , "<Term2> ::= . <Term2> <Term3>"
        , "<Term2> ::= . <Term3>"
        , "<Term3> ::= . `lid'"
        , "<Term3> ::= . `lprn' <Term0> `rprn'"
        , "<Term3> ::= . `sid'"
        ]
    , myNexts = 
        [ "<Term0> +-> 19"
        , "<Term1> +-> 2"
        , "<Term2> +-> 3"
        , "<Term3> +-> 4"
        , "`lid' +-> 5"
        , "`lprn' +-> 6"
        , "`sid' +-> 7"
        ]
    }
getParserSInfo 15 = ParserSInfo
    { myItems = 
        [ "<Term0> ::= . <Term1>"
        , "<Term0> ::= . `lid' `lambda' <Term0>"
        , "<Term0> ::= . `sid' `lambda' <Term0>"
        , "<Term1> ::= . <Term2>"
        , "<Term1> ::= . <Term2> `lid' `lambda' <Term0>"
        , "<Term1> ::= . <Term2> `sid' `lambda' <Term0>"
        , "<Term1> ::= <Term2> `sid' `lambda' . <Term0>"
        , "<Term2> ::= . <Term2> <Term3>"
        , "<Term2> ::= . <Term3>"
        , "<Term3> ::= . `lid'"
        , "<Term3> ::= . `lprn' <Term0> `rprn'"
        , "<Term3> ::= . `sid'"
        ]
    , myNexts = 
        [ "<Term0> +-> 20"
        , "<Term1> +-> 2"
        , "<Term2> +-> 3"
        , "<Term3> +-> 4"
        , "`lid' +-> 5"
        , "`lprn' +-> 6"
        , "`sid' +-> 7"
        ]
    }
getParserSInfo 16 = ParserSInfo
    { myItems = 
        [ "<Term0> ::= `lid' `lambda' <Term0> ."
        ]
    , myNexts = []
    }
getParserSInfo 17 = ParserSInfo
    { myItems = 
        [ "<Term3> ::= `lprn' <Term0> `rprn' ."
        ]
    , myNexts = []
    }
getParserSInfo 18 = ParserSInfo
    { myItems = 
        [ "<Term0> ::= `sid' `lambda' <Term0> ."
        ]
    , myNexts = []
    }
getParserSInfo 19 = ParserSInfo
    { myItems = 
        [ "<Term1> ::= <Term2> `lid' `lambda' <Term0> ."
        ]
    , myNexts = []
    }
getParserSInfo 20 = ParserSInfo
    { myItems = 
        [ "<Term1> ::= <Term2> `sid' `lambda' <Term0> ."
        ]
    , myNexts = []
    }

_First = 
    [ "<Term0> +-> {`lid', `lprn', `sid'}"
    , "<Term1> +-> {`lid', `lprn', `sid'}"
    , "<Term2> +-> {`lid', `lprn', `sid'}"
    , "<Term3> +-> {`lid', `lprn', `sid'}"
    , "<\\ACCEPT> +-> {`lid', `lprn', `sid'}"
    ]

_LA = 
    [ "( q = 1, [<\\ACCEPT> ::= <Term0>] ) +-> {}"
    , "( q = 1, [<\\ACCEPT> ::= <Term0>] ) +-> {`\\$'}"
    , "( q = 2, [<Term0> ::= <Term1>] ) +-> {`\\$', `rprn'}"
    , "( q = 3, [<Term1> ::= <Term2>] ) +-> {`\\$', `rprn'}"
    , "( q = 4, [<Term2> ::= <Term3>] ) +-> {`\\$', `lid', `lprn', `rprn', `sid'}"
    , "( q = 5, [<Term3> ::= `lid'] ) +-> {`\\$', `lid', `lprn', `rprn', `sid'}"
    , "( q = 7, [<Term3> ::= `sid'] ) +-> {`\\$', `lid', `lprn', `rprn', `sid'}"
    , "( q = 8, [<Term2> ::= <Term2> <Term3>] ) +-> {`\\$', `lid', `lprn', `rprn', `sid'}"
    , "( q = 9, [<Term3> ::= `lid'] ) +-> {`\\$', `lid', `lprn', `rprn', `sid'}"
    , "( q = 10, [<Term3> ::= `sid'] ) +-> {`\\$', `lid', `lprn', `rprn', `sid'}"
    , "( q = 16, [<Term0> ::= `lid' `lambda' <Term0>] ) +-> {`\\$', `rprn'}"
    , "( q = 17, [<Term3> ::= `lprn' <Term0> `rprn'] ) +-> {`\\$', `lid', `lprn', `rprn', `sid'}"
    , "( q = 18, [<Term0> ::= `sid' `lambda' <Term0>] ) +-> {`\\$', `rprn'}"
    , "( q = 19, [<Term1> ::= <Term2> `lid' `lambda' <Term0>] ) +-> {`\\$', `rprn'}"
    , "( q = 20, [<Term1> ::= <Term2> `sid' `lambda' <Term0>] ) +-> {`\\$', `rprn'}"
    ]
-}
