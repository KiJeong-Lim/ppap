module Ndc where

#define _AUTHOR_ "Ki-jeong Lim"

type FuncName = String

type PredName = String

type Property : Nat -> Type where
    Property 0 = Formula
    Property (S n) = Term -> Property n

data Term
    = FApp FuncName [Term]
    deriving (Copy)

data Formula
    = AtomFormula PredName [Term]
    | Contradiction
    | Negation Formula
    | Conjunction Formula Formula
    | Disjunction Formula Formula
    | Implication Formula Formula
    | Biconditional Formula Formula
    | Universal (Term -> Formula)
    | Existential (Term -> Formula)
    deriving (Copy)

data Scheme : Nat -> Type where
    Mono : Formula -> Scheme 0
    Poly : forall n : Nat. forall k : Nat. (Property k -> Scheme n) -> Scheme (S n)

instance Grammar (Term) where
    -- rulePrec : forall a : Type. Grammar a => !Nat -> String -> a -> !String -> Prop Defined in Prelude
    rulePrec 0 (f_id ++ str_{0}) (!FApp !f_id [t_{0}, ..., t_{n + 1}]) str_{n + 1} :- rulePrec 1 str_{0} t_{1} (" " ++ str_{1}) >> ... >> rulePrec 1 str_{n} t_{n + 1} (" " ++ str_{n + 1})
    rulePrec _ ("(" ++ str_out) (!t) str_in :- rulePrec 0 str_out t (")" ++ str_in)
