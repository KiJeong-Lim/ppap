\hshead {
    module Json.JsonParser where

    import Json.JsonLexer
}

\target {
    token-type: "JsonToken (Int, Int)"
    parser-name: "jsonparser"
    result-type: "ValueRep"
    start: $Value
    terminals:
        "T_lbrace loc": $lbrace 0 none
        "T_rbrace loc": $rbrace 0 none
        "T_lbracket loc": $lbracket 0 none
        "T_rbracket loc": $rbracket 0 none
        "T_comma loc": $comma 0 none
        "T_semicolon loc": $semicolon 0 none
        "T_true loc": $true 0 none
        "T_false loc": $false 0 none
        "T_null loc": $null 0 none
        "T_string loc str": $strlit 0 none
        "T_integer loc num": $intlit 0 none
        "T_fraction loc num": $fralit 0 none
        "T_exponent loc num": $explit 0 none
}

\define $Value : "ValueRep" {
    10 [$Object]:
        ValueRep_object $1
    10 [$Array]:
        ValueRep_array $1
    10 [$strlit]:
        ValueRep_string $1.str
    10 [$Number]:
        ValueRep_number $1
    10 [$true]:
        ValueRep_true
    10 [$false]:
        ValueRep_false
    10 [$null]:
        ValueRep_null
}

\define $Object : "ObjectRep" {
    10 [$lbrace, $rbrace]:
        []
    10 [$lbrace, $Elements, $rbrace]:
        $2 
}

\define $Elements : "[(String, ValueRep)]" {
    10 [$strlit, $semicolon, $Value]:
        [($1.str, $3)]
    10 [$strlit, $semicolon, $Value, $comma, $Elements]:
        ($1.str, $3) : $5
}

\define $Array : "ArrayRep" {
    10 [$lbracket, $rbracket]:
        []
    10 [$lbracket, $Members, $rbracket]:
        $2
}

\define $Members : "[ValueRep]" {
    10 [$Value]:
        $1 : []
    10 [$Value, $comma, $Members]:
        $1 : $3
}

\define $Number : "NumberRep" {
    10 [$intlit]:
        NumberRep_integer $1.num
    10 [$fralit]:
        NumberRep_fraction $1.num
    10 [$explit]:
        NumberRep_exponent $1.num
}

\hstail{
    data ValueRep
        = ValueRep_object ObjectRep
        | ValueRep_array ArrayRep
        | ValueRep_string String
        | ValueRep_number NumberRep
        | ValueRep_true
        | ValueRep_false
        | ValueRep_null
        deriving (Eq, Show)
    type ObjectRep = [(String, ValueRep)]
    type ArrayRep = [ValueRep]
    data NumberRep
        = NumberRep_integer String
        | NumberRep_fraction String
        | NumberRep_exponent String
        deriving (Eq, Show)
}
